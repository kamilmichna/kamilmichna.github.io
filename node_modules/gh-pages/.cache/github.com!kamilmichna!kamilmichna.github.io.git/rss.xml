<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kamil Michna - amatorski blog programistyczny z portfolio 🖥️😀]]></title><description><![CDATA[Amatorski blog opowiadający o IT połączony z portfolio.]]></description><link>https://kamilmichna.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 07 Dec 2019 08:28:56 GMT</lastBuildDate><item><title><![CDATA[Matura 2019 - Ulubione cyfry]]></title><description><![CDATA[Matura 2019 - Ulubione cyfryCześć! Nowa seria polegać będzie na wspólnym rozwiązywaniu zadań z matury rozszerzonej z informatyki, do której…]]></description><link>https://kamilmichna.github.io//2019/8/matura-2019-1/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/8/matura-2019-1/</guid><pubDate>Thu, 08 Aug 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Matura 2019 - Ulubione cyfry&lt;/h1&gt;
&lt;p&gt;Cześć! Nowa seria polegać będzie na wspólnym rozwiązywaniu zadań z matury rozszerzonej z informatyki, do której właśnie się przygotowuję. Wykorzystywać będziemy język &lt;strong&gt;Python&lt;/strong&gt; - jako jeden z dostępnych obecnie. Zaczniemy od tegorocznej matury. Arkusze matury możesz znaleźć na stronie Centralnej Komisji Egzaminacyjnej:  &lt;a href=&quot;https://cke.gov.pl/egzamin-maturalny/egzamin-w-nowej-formule/arkusze/2019-2/&quot;&gt;Link&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Treść zadania:&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Małgosia i Jaś lubią liczby. Małgosia lubi liczby nieparzyste, a Jaś lubi liczby parzyste. Każde z dzieci zapisało po kilka spośród swoich ulubionych liczb na jednej wspólnej kartce. Najpierw Małgosia zapisała wszystkie swoje liczby, a potem Jaś dopisał swoje.&lt;/code&gt;
&quot;Kartkę&quot; możemy przedstawić jako &lt;strong&gt;tablicę dwuwymiarową&lt;/strong&gt; która zawiera najpierw bliżej nieokreśloną ilość liczb nieparzystych, a następnie - również nieokreśloną ilość liczb parzystych. Dla przykładu, zbiór liczb wypisanych przez Jasia i Małgosie może wyglądać w ten sposób:
&lt;code class=&quot;language-text&quot;&gt;{5, 99, 3, 7, 111, 13, 4, 24, 4, 8}&lt;/code&gt;
Od lewej mamy zapisane liczby Małgosi - nieparzyste. Naszym celem jest znalezienie pierwszej liczby Jasia - czyli pierwszej liczby parzystej. W tym przypadku jest to &lt;strong&gt;4&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Zadanie 1.1:&lt;/h2&gt;
&lt;p&gt;`
Napisz algorytm (w postaci listy kroków, w pseudokodzie lub w wybranym języku programowania), który dla danego ciągu liczb zapisanych przez dzieci znajdzie pierwszą liczbę zapisaną przez Jasia. Zakładamy, że każde z dzieci zapisało co najmniej jedną liczbę. &lt;/p&gt;
&lt;p&gt;Przy ocenie będzie brana pod uwagę złożoność czasowa Twojego algorytmu. Maksymalną liczbę punktów uzyskasz za algorytm o złożoności lepszej niż liniowa. &lt;/p&gt;
&lt;p&gt;Uwaga: W zapisie algorytmu możesz wykorzystać tylko operacje arytmetyczne (dodawanie, odejmowanie, mnożenie, dzielenie, dzielenie całkowite, reszta z dzielenia), instrukcje porównania, instrukcje sterujące i przypisania do zmiennych lub samodzielnie napisane funkcje, wykorzystujące wyżej wymienione operacje.
`
O co chodzi? Ano mamy za zadanie napisać w &lt;strong&gt;dowolnym języku programowania lub pseudokodzie&lt;/strong&gt; program który w ciągu liczb znajdzie nam pierwszą liczbę parzystą (napisaną przez Jasia). Jest to stosunkowo proste na pierwszy rzut oka, ale sprawa komplikuje się przy &lt;strong&gt;złożoności obliczeniowej&lt;/strong&gt;. Wykonajmy więc póki co zadanie w najprostszy sposób, taki po &quot;najmniejszej linii oporu&quot;  - najszybszy ale jednocześnie dający nam najmniejszą liczbę punktów.&lt;/p&gt;
&lt;p&gt;W jaki sposób to zrobimy? Pewnie większość z Was gdyby bez względu na wspomnianą już &lt;strong&gt;złożoność obliczeniową&lt;/strong&gt; miała napisać wymagany algorytm zrobiła by to w ten sposób. po prostu sprawdzamy naszą tablicę od lewej do prawej, i gdy tylko natrafimy na liczbę parzystą zatrzymujemy go i zwracamy wynik. Użyjemy do tego &lt;strong&gt;pętli&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# używam polskiej nazwy zmiennej jedynie dla lepszej czytelności kodu.&lt;/span&gt;
lista &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; liczba &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; lista&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; liczba &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Pierwsza liczba parzysta to: &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;liczba&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Myślę że kod jest bardzo prosty - i co ważne czytelny. Moglibyśmy również zrobić z niego funkcję która odnajdzie pierwszą liczbę parzystą dla każdego zbioru liczb podanego jako argument. Do dzieła!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# używam polskiej nazwy zmiennej jedynie dla lepszej czytelności kodu.&lt;/span&gt;
lista &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pierwsza_parzysta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;liczby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; liczba &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; liczby&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; liczba&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; liczba

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Pierwsza parzysta liczba to: &apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pierwsza_parzysta&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lista&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Program w obu powyższych przypadkach zwróci 4 - czyli działa. Kod jest czytelny, prosty, sukces, prawda? Ano nie. Rozwiązanie jest prawidłowe, ale dostalibyśmy za nie minimalną liczbę punktów. &lt;/p&gt;
&lt;h2&gt;Dlaczego?&lt;/h2&gt;
&lt;p&gt;Problemem jest  wspomniana już wcześniej &lt;strong&gt;złożoność obliczeniowa&lt;/strong&gt;. O co chodzi? Ważnym problemem w informatyce jest opisanie szybkości danego programu. Jednak istnieje całe mnóstwo konfiguracji sprzętowych - zwyczajny pomiar czasu wykonania nie jest miarodajny. Dlatego używa się różnych sposobów na określenie szybkości działania algorytmu. W skrócie, nasz algorytm ma obecnie złożoność liniową. Dlaczego? Ano jeżeli narysowalibyśmy sobie wykres ilości przeprowadzonych operacji do ilości liczb to była by to linia prosta - im więcej liczb tym więcej razy musimy iterować przez tablicę. Lepszym rozwiązaniem jest zastosowanie algorytmu o złożoności logarytmicznej. Zapisany przeze mnie w pythonie algorytm wygląda w ten sposób: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;A &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#Otrzymaliśmy wynik, wyświetlamy go&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		A &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	A &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Co dzieje się w tym programie? Załóżmy że mamy tablicę: &lt;code class=&quot;language-text&quot;&gt;1,2,5,6,22,44,18&lt;/code&gt;. Program znajduje jej środek, czyli &lt;code class=&quot;language-text&quot;&gt;6&lt;/code&gt;. Następnie sprawdza wartość elementu wcześniejszego, czyli &lt;code class=&quot;language-text&quot;&gt;5&lt;/code&gt;. Jeżeli nasz  parzysty środek jest poprzedzony liczbą nieparzystą, oznacza to że znaleźliśmy poszukiwaną przez nas wartość. Sprawdźmy teraz działanie algorytmu na innym zbiorze danych, na przykład podanym wcześniej: &lt;code class=&quot;language-text&quot;&gt;5, 99, 3, 7, 111, 13, 4, 24, 4, 8&lt;/code&gt;. Program środek tablicy znajduje wzorem &lt;code class=&quot;language-text&quot;&gt;długość tablicy//2&lt;/code&gt;, czyli w naszym przypadku jest to indeks 5 - wartość &lt;code class=&quot;language-text&quot;&gt;13&lt;/code&gt;. Program sprawdza element poprzedzający - &lt;code class=&quot;language-text&quot;&gt;111&lt;/code&gt;. Instrukcja warunkowa nr 2 (środkowy elif) mówi mu, że w takim przypadku ma uciąć pierwszą połowę naszej tabeli - element szukany na pewno znajduje się bardziej na prawo! Następuje kolejna iteracja. Tym razem za środek zostaje przyjęty element o indeksie &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;, a A ma teraz elementy: &lt;code class=&quot;language-text&quot;&gt;13, 4, 24, 4, 8&lt;/code&gt;. 24 jest podzielne przez 2, element poprzedzający - 4 - też. W tym wypadku odcinamy wszystko na prawo, razem z 24. Pozostaje nam &lt;code class=&quot;language-text&quot;&gt;[13,4]&lt;/code&gt;, z którego program zwraca wartość 4 dzięki pierwszej instrukcji warunkowej. I  voilà! Użyliśmy tutaj wariacji algorytmu &lt;code class=&quot;language-text&quot;&gt;binary search&lt;/code&gt;, który według Wikipedii ma złożoność &lt;strong&gt;O(log n)&lt;/strong&gt;. Oznacza to że &lt;strong&gt;w przypadku miliona elementów w tablicy program musiałby sprawdzić maksymalnie 20 elementów aby znaleźć pożądany, a nasz wcześniejszy algorytm - w najgorszym wypadku - aż milion!&lt;/strong&gt; To gigantyczna przepaść w złożoności, ważna zwłaszcza w dużych zbiorach danych. Następnie pozostało nam udzielić odpowiedzi - złożoność naszego algorytmu jest &lt;strong&gt;logarytmiczna&lt;/strong&gt;. Zadanie gotowe!&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Biblioteka Webu #4 - Angular]]></title><description><![CDATA[Biblioteka Webu #4 - AngularZnalezione obrazy dla zapytania angular
Angular to obok Reacta i Vue najpopularniejszy framework webowy…]]></description><link>https://kamilmichna.github.io//2019/6/biblioteka-webu-4/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/6/biblioteka-webu-4/</guid><pubDate>Fri, 28 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Biblioteka Webu #4 - Angular&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*P7x-_0XfQz6CVmMY_QAv0w.png&quot; alt=&quot;Znalezione obrazy dla zapytania angular&quot;&gt;
&lt;strong&gt;Angular&lt;/strong&gt; to obok &lt;strong&gt;Reacta&lt;/strong&gt; i &lt;strong&gt;Vue&lt;/strong&gt; najpopularniejszy framework webowy. Stworzony i rozwijany przez &lt;strong&gt;Google&lt;/strong&gt;. Początkowo &lt;strong&gt;Angular&lt;/strong&gt; miał być kontynuacją frameworka &lt;strong&gt;Angular JS&lt;/strong&gt;, jednak porzucono ten pomysł, należy więc pamiętać że to dwie różne technologie, i &lt;strong&gt;bardzo mocno sugerował bym naukę Angulara zamiast AngularJS&lt;/strong&gt;. Dlaczego? O tym przeczytacie  między innymi tutaj: &lt;a href=&quot;https://gorrion.io/blog/angularjs-vs-angular&quot;&gt;https://gorrion.io/blog/angularjs-vs-angular&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Co posiada Angular?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Templates, czyli Html do którego możemy &quot;wszczepiać&quot; dane z naszej aplikacji&lt;/li&gt;
&lt;li&gt;Wstrzykiwanie zależności&lt;/li&gt;
&lt;li&gt;Pobieranie danych np z &lt;strong&gt;REST Api&lt;/strong&gt; za pomocą &lt;strong&gt;HttpClient&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Naprawdę prosty i przyjemny system routingu&lt;/li&gt;
&lt;li&gt;Komponenty&lt;/li&gt;
&lt;li&gt;Serwisy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typescript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oraz wiele wiele więcej!&lt;/p&gt;
&lt;h2&gt;Jak zainstalować Angulara?&lt;/h2&gt;
&lt;p&gt;To bardzo proste. Jak zwykle skorzystamy z &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt;. Musimy zainstalować globalnie paczkę &lt;code class=&quot;language-text&quot;&gt;@angular/cli&lt;/code&gt;. Co to takiego? To bardzo przydatne narzędzie konsolowe pozwalające na tworzenie nowych projektów w &lt;strong&gt;Angular&lt;/strong&gt;, komponentów, serwisów oraz uruchamiania skryptów, na przykład do &lt;strong&gt;budowania wersji produkcyjnej aplikacji&lt;/strong&gt;. Użyjmy zatem polecenia
&lt;code class=&quot;language-text&quot;&gt;npm install -g @angular/cli&lt;/code&gt;.
Gotowe!&lt;/p&gt;
&lt;h2&gt;Tworzymy pierwszy projekt&lt;/h2&gt;
&lt;p&gt; Stworzenie projektu w &lt;strong&gt;Angular&lt;/strong&gt; jest bardzo proste. Zrobimy to za pomocą komendy &lt;strong&gt;ng new nazwaaplikacji&lt;/strong&gt;, która utworzy nam folder o podanej przez nas nazwie. Następnie wchodzimy do niego poleceniem &lt;strong&gt;cd nazwa&lt;/strong&gt;. W środku możemy zauważyć kilka katalogów, najbardziej istotny dla nas jest jednak ten o nazwie &lt;strong&gt;src&lt;/strong&gt;. To na plikach w nim zawartych będzie skupiać się nasza praca i to one odpowiadają za działanie aplikacji. Znajdują się tam między innymi foldery z naszymi komponentami oraz serwisami. Nie będę tutaj omawiał dokładnego tworzenia aplikacji w &lt;strong&gt;Angular&lt;/strong&gt;, jednak więcej informacji znajdziesz w jego oficjalnej dokumentacji: &lt;a href=&quot;https://angular.io/&quot;&gt;https://angular.io/&lt;/a&gt;. Jeszcze jednym poleceniem które będzie nam przydatne będzie &lt;strong&gt;ng serve -o&lt;/strong&gt;. Powoduje ono że nasza aplikacja jest hostowana pod adresem &lt;a href=&quot;http://localhost:4200/&quot;&gt;http://localhost:4200/&lt;/a&gt;.  Argument &lt;code class=&quot;language-text&quot;&gt;-o&lt;/code&gt; otwiera ten adres w nowej karcie przeglądarki&lt;/p&gt;
&lt;h2&gt;Kto używa Angulara?&lt;/h2&gt;
&lt;p&gt; &lt;strong&gt;Angular&lt;/strong&gt; używany jest przez wiele firm, między innymi&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Samsung &lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Microsoft &lt;/li&gt;
&lt;li&gt;Forbes&lt;/li&gt;
&lt;li&gt;Indiegogo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Więcej ciekawych przykładów na wykorzystanie &lt;strong&gt;Angulara&lt;/strong&gt; oraz listę firm używających tej technologii znajdziesz pod adresem: &lt;a href=&quot;https://www.madewithangular.com/&quot;&gt;https://www.madewithangular.com/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Typescript #1 - typowanie statyczne zmiennych]]></title><description><![CDATA[Typescript #1 - typowanie statyczne zmiennych Jedną z głównych zalet, o którą de facto oparty jest cały TypeScript jest typowanie statyczne…]]></description><link>https://kamilmichna.github.io//2019/6/typescript-1/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/6/typescript-1/</guid><pubDate>Mon, 24 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Typescript #1 - typowanie statyczne zmiennych&lt;/h1&gt;
&lt;p&gt; Jedną z głównych zalet, o którą de facto oparty jest cały &lt;strong&gt;TypeScript&lt;/strong&gt; jest typowanie statyczne. Zapewne część z was spotkała się z nim w innych językach programowania, jednak warto przyjrzeć mu się bliżej. Istnieje kilka typów zmiennych. Jak je zadeklarować? Odpowiem na to pytanie poniżej!&lt;/p&gt;
&lt;h2&gt;Boolean&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; booleanVariable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bool&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
booleanVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//OK&lt;/span&gt;
booleanVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//OK&lt;/span&gt;
booleanVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Co tutaj się dziej? Za pomocą  : typ_zmiennej` określamy że dana zmienna może mieć wartość tylko danego typu, w tym przypadku &lt;strong&gt;true&lt;/strong&gt; lub &lt;strong&gt;false&lt;/strong&gt;. Próba przypisania na przykład &lt;strong&gt;stringa&lt;/strong&gt; zwróci błąd. I to w zasadzie główne założenie &lt;strong&gt;TypeScripta&lt;/strong&gt; i coś co stanowi jego podstawę. Jakie typy danych jeszcze istnieją? Sprawdźmy!&lt;/p&gt;
&lt;h2&gt;Number&lt;/h2&gt;
&lt;p&gt;Typ number działa identycznie jak w &lt;strong&gt;JavaScript&lt;/strong&gt; - są to wszystkie liczby typu &lt;strong&gt;float&lt;/strong&gt;. Zdefiniowanie go jest dziecinnie proste:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; numberVariable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
numberVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//OK&lt;/span&gt;
numberVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Error&lt;/span&gt;
numberVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;String&lt;/h2&gt;
&lt;p&gt;Działa identycznie jak string w &lt;strong&gt;JavaScript&lt;/strong&gt;. Jest to ciąg znaków ograniczony znakiem &lt;code class=&quot;language-text&quot;&gt;&amp;#39;&lt;/code&gt; lub &lt;code class=&quot;language-text&quot;&gt;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; stringVariable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
stringVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &quot;hello&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//OK&lt;/span&gt;
stringVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Error&lt;/span&gt;
stringVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dozwolone są także tzw. &lt;strong&gt;template stringi&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;	stringVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`wynik dodawania to &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//OK&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Tablice&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; pozwala nam także na pracę z tablicami. Najpierw podobnie jak wcześniej definiujemy rodzaj danych w tablicy, a następnie dodajemy &lt;strong&gt;[]&lt;/strong&gt;. Przykłady:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arrayOfNumbers&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
arrayOfNumbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// OK&lt;/span&gt;
arrayOfNumbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;jeden&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dwa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;trzy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Error&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arrayOfStrings&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
arrayofStrings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;jeden&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dwa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;trzy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//OK&lt;/span&gt;
arrayOfStrings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Możemy także użyć tzw &lt;strong&gt;generic array type&lt;/strong&gt;, w następujący sposób:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arrayOfNumbers&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
arrayOfNumbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// OK&lt;/span&gt;
arrayOfNumbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;jeden&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dwa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;trzy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Tuple (krotka)&lt;/h2&gt;
&lt;p&gt;Tuple to uporządkowany ciąg danych, przypomina tablicę o stałej, określonej długości. Jak ją zdefiniować w &lt;strong&gt;TypeScript?&lt;/strong&gt; to proste!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; tuple&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
tuple &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// OK&lt;/span&gt;
tuple &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Any&lt;/h2&gt;
&lt;p&gt;Typ any oznacza że do danej zmiennej może zostać przypisana wartość dowolnego typu.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; anyVariable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; any&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
anyVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// OK&lt;/span&gt;
anyVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12345&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// OK&lt;/span&gt;
anyVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// OK&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mam nadzieję że powyższy post przybliżył Ci typy zmiennych w &lt;strong&gt;TypeScript&lt;/strong&gt;! Po więcej wiedzy zajżyj
&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/basic-types.html&quot;&gt;do dokumentacji&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[TypeScript #0 - typowanie statyczne w JavaScript ]]></title><description><![CDATA[TypeScript #0 - typowanie statyczne w JavaScript. TypeScript to, jak mówi Wikipedia: "... wolny i otwartoźródłowy język programowania…]]></description><link>https://kamilmichna.github.io//2019/6/typescript-0/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/6/typescript-0/</guid><pubDate>Fri, 21 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;TypeScript #0 - typowanie statyczne w JavaScript.&lt;/h1&gt;
&lt;p&gt; TypeScript to, jak mówi Wikipedia: &lt;strong&gt;&quot;... wolny i otwartoźródłowy język programowania stworzony przez firmę Microsoft jako nadzbiór języka JavaScript. Umożliwia on opcjonalne statyczne typowanie oraz programowanie zorientowane obiektowo oparte na klasach.&quot;&lt;/strong&gt; Co to oznacza w praktyce? Przekonajmy się!
&lt;img src=&quot;https://i1.wp.com/storage.googleapis.com/blog-images-backup/1*D8Wwwce8wS3auLAiM3BQKA.jpeg?resize=2000%2C1105&amp;#x26;ssl=1&quot; alt=&quot;Znalezione obrazy dla zapytania typescript&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Typowanie statyczne - po co mi to?&lt;/h2&gt;
&lt;p&gt;Dla wielu osób dużą zaletą &lt;strong&gt;JavaScript&lt;/strong&gt; jest właśnie brak &lt;strong&gt;statycznego typowania&lt;/strong&gt;. Często można spotkać się z opinią, że &quot;ogranicza&quot; ono programistę, i dla tego część osób unika języków z typowaniem statycznym takich jak &lt;strong&gt;Java&lt;/strong&gt;, &lt;strong&gt;C++&lt;/strong&gt; czy &lt;strong&gt;C#&lt;/strong&gt; wybierając języki takie jak na przykład &lt;strong&gt;Python&lt;/strong&gt; czy &lt;strong&gt;JavaScript&lt;/strong&gt;. &lt;strong&gt;TypeScript&lt;/strong&gt; to &lt;strong&gt;nadzbiór JavaScript&lt;/strong&gt; oznacza to, że niczego on nie narzuca - i każdy kod napisany w &lt;strong&gt;JavaScript&lt;/strong&gt; jest jednocześnie poprawnym kodem &lt;strong&gt;TypeScript&lt;/strong&gt;, nie musimy więc martwić się o integracje z kodem &lt;strong&gt;JS&lt;/strong&gt;, jak również &lt;strong&gt;nie musimy uczyć się od nowa - TypeScript to też JavaScript, tylko z dodatkowymi funkcjonalnościami&lt;/strong&gt;. &lt;/p&gt;
&lt;h2&gt;Możliwości Typescript&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Typowane zmienne, argumenty i funkcje&lt;/li&gt;
&lt;li&gt;Klasy&lt;/li&gt;
&lt;li&gt;Interfejsy&lt;/li&gt;
&lt;li&gt;Enum&lt;/li&gt;
&lt;li&gt;Moduły&lt;/li&gt;
&lt;li&gt;Opcjonalne parametry funkcji&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Gdzie mogę użyć TypeScript?&lt;/h2&gt;
&lt;p&gt;Na oficjalnej stronie &lt;strong&gt;TypeScript&lt;/strong&gt; widnieje sporo poradników jak rozpocząć przygodę ze &lt;strong&gt;statycznym typowaniem w JavaScript&lt;/strong&gt; w różnych technologiach i językach. Znajdziemy poradniki dotyczące integracji &lt;strong&gt;Typescript w projekcie korzystającym z Reacta, Angulara, Express.js, Vue, .Net, oraz projektach z  czystym JS, na przykład przy użyciu Babel&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Jakie zalety ma TypeScript?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bezpieczniejszy kod&lt;/strong&gt; - statyczne typowanie pozwala nam lepiej zarządzać danymi w naszej aplikacji, i czyni ją bardziej usystematyzowaną.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntax sugar&lt;/strong&gt; - wiele nowych features jest dostępnych w &lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bardzo dobre wsparcie w narzędziach do Microsoft&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mam nadzieję że powyższy post przekonał Cię do dania szansy &lt;strong&gt;statycznemu typowaniu w JS&lt;/strong&gt;. Więcej postów na ten temat, wyjaśniających dokładniej jedne z najważniejszych funkcji &lt;strong&gt;TypeScripta&lt;/strong&gt; już niebawem!&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Szybka porada #2 - Serveo]]></title><description><![CDATA[Czym jest Serveo?Na pewno niejednokrotnie podczas pisania aplikacji webowej lub zwykłej strony dla klienta, spotkałeś się ze z sytuacją, gdy…]]></description><link>https://kamilmichna.github.io//2019/6/szybka-porada-2/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/6/szybka-porada-2/</guid><pubDate>Fri, 14 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Czym jest Serveo?&lt;/h1&gt;
&lt;p&gt;Na pewno niejednokrotnie podczas pisania aplikacji webowej lub zwykłej strony dla klienta, spotkałeś się ze z sytuacją, gdy musiałeś przedstawić mu na przykład jak zachowują się interaktywne elementy po najechaniu na nie, lub jak wyglądają animacje na stronie. Jest to dosyć problematyczne ze względu na to, że nie można przecież przedstawić tego na statycznej grafice. Wielu programistów radzi sobie na przykład nagrywając ekran za pomocą programu, ale nie pozwala to klientowi &quot;poczuć&quot; jak działa strona na własnej skórze. Jest na to jedno dość proste rozwiązanie. Nazywa się Serveo. &lt;/p&gt;
&lt;p&gt;Dzisiejszy post będzie bardzo krótki, bo samo narzędzie jest bardzo proste. Pozwala na udostępnienie adresu lokalnego do sieci. Jak to działa? Wyobraź sobie że twoja aplikacja, na przykład w &lt;strong&gt;Reactcie&lt;/strong&gt; (ale może być to również dowolna inna technologia) za pomocą polecenia &lt;code class=&quot;language-text&quot;&gt;npm start&lt;/code&gt; jest &quot;hostowana&quot; pod adresem &lt;code class=&quot;language-text&quot;&gt;localhost:3000&lt;/code&gt;. Aby udostępnić ją w sieci globalnej, użyjmy polecenia w terminalu: &lt;code class=&quot;language-text&quot;&gt;ssh -R 80:localhost:3000 serveo.net&lt;/code&gt;. Używamy tutaj polecenia &lt;strong&gt;ssh&lt;/strong&gt;, w które nie będę się bardziej zagłębiał, warto jednak zaznaczyć, że zapytania z serveo są przekierowane na nasz &lt;strong&gt;localhost&lt;/strong&gt; i odwrotnie. Zwróć jednak uwagę na jakim porcie działa twój serwer lokalny - jeżeli nie jest to &lt;strong&gt;3000&lt;/strong&gt;, musisz zastąpić port w poleceniu na swój. Po poprawnym użyciu polecenia w terminalu pojawi się adres sieci globalnej pod którym dostępny jest twój projekt. Więcej o &lt;strong&gt;Serveo&lt;/strong&gt; przeczytasz na &lt;a href=&quot;https://serveo.net/&quot;&gt;stronie projektu&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Biblioteka Webu #3 - React Native]]></title><description><![CDATA[Biblioteka webu #3: Czym jest React Native?React Native to framework pozwalający tworzyć aplikacje mobilne z wykorzystaniem Javascript oraz…]]></description><link>https://kamilmichna.github.io//2019/6/biblioteka-webu-3/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/6/biblioteka-webu-3/</guid><pubDate>Tue, 11 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Biblioteka webu #3: Czym jest React Native?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;React Native&lt;/strong&gt; to framework pozwalający tworzyć aplikacje mobilne z wykorzystaniem &lt;strong&gt;Javascript&lt;/strong&gt; oraz &lt;strong&gt;React&lt;/strong&gt;. Jego główną zaletą jest prostota, w szczególności dla frontend developerów. Przeniesienie się na niego z webowej wersji React jest bardzo proste i intuicyjne.&lt;/p&gt;
&lt;h2&gt;Jak zacząć? - instalacja i wymagania wstępne&lt;/h2&gt;
&lt;p&gt;React Native jest szczególnie dobrym wyborem, przy tworzeniu aplikacji mobilnej przez developera znającego &lt;strong&gt;React&lt;/strong&gt;, powinna być więc możliwie jak najbardziej zbliżona do tego co znamy z wersji webowej frameworka. Aby rozpocząć, potrzebujemy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zainstalowany &lt;strong&gt;Android SDK&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Android Studio, aby łatwiej zarządzać emulatorami &lt;strong&gt;Android&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;React Native CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;React Native CLI&lt;/h2&gt;
&lt;p&gt;React Native CLI to narzędzie pozwalające nam na łątwe tworzenie i zarządzanie projektem &lt;strong&gt;React Native&lt;/strong&gt; z posiomu konsoli lub terminala. Zainstalujemy je poprzez &lt;strong&gt;npm&lt;/strong&gt;:
&lt;code class=&quot;language-text&quot;&gt;npm install -g react-native-cli&lt;/code&gt;
Następnie aby stworzyć nowy projekt użyj polecenia:
&lt;code class=&quot;language-text&quot;&gt;react-native init AwesomeProject&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Pierwszy projekt&lt;/h2&gt;
&lt;p&gt;Aby uruchomić pierwszy projekt, konieczne będzie uruchomienie emulatora Android. W &lt;strong&gt;Android Studio&lt;/strong&gt; wejdź w zakładkę &lt;strong&gt;AVD Manager&lt;/strong&gt; - ikonka w prawym górnym rogu. Utwórz tam emulator z obrazem &lt;strong&gt;Pie API Level 28 image.&lt;/strong&gt; Po przejściu do terminala komenda &lt;code class=&quot;language-text&quot;&gt;emulator @nazwanaszegoemulatora&lt;/code&gt; powinno bezproblemowo odpalić emulator &lt;strong&gt;Android&lt;/strong&gt;. Jeżeli nie wiesz jakie nazwy mają emulatory skonfigurowane na twoim komputerze polecenie &lt;code class=&quot;language-text&quot;&gt;emulator -list-avds&lt;/code&gt; wyświetli wszystkie dostępne. Następnie w oddzielnym oknie terminala przechodzimy do katalogu z zainicjowanym wcześniej projektem &lt;strong&gt;AwesomeProject&lt;/strong&gt; i uruchamiamy polecenie &lt;code class=&quot;language-text&quot;&gt;react-native run-android&lt;/code&gt;. Na naszym emulatorze powinna uruchomić się podstawowa aplikacja w &lt;strong&gt;React Native&lt;/strong&gt;. Więcej na temat instalacji i konfiguracji przeczytasz &lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Czy warto używać React Native?&lt;/h2&gt;
&lt;p&gt;React Native to naprawdę świetna technologia, zwłaszcza dla developerów piszących obecnie w &lt;strong&gt;React&lt;/strong&gt; - mi napisanie prostej aplikacji w &lt;strong&gt;React Native&lt;/strong&gt; zajęło niewiele więcej niż analogiczna aplikacja w webowej wersji frameworka. Dodatkowo oszczędzasz czas - framework pozwala na pisanie jednocześnie na &lt;strong&gt;Android&lt;/strong&gt; oraz &lt;strong&gt;Ios&lt;/strong&gt;. Multiplatformowość oraz prostota nawet kosztem mniejszej wydajności jest w przypadku prostych aplikacji bardzo cenna. Oczywiście nie zawsze &lt;strong&gt;React Native&lt;/strong&gt; jest najlepszym wyborem - w przypadku gier, aplikacji bardzo mocno korzystających np z czujników telefonu czy kamery, albo aplikacji potrzebujących naprawdę dużej wydajności framework sprawdzi się gorzej niż na przykład języki natywne, ale do pisania klienta aplikacji webowej na urządzenia mobilne nada się idealnie. Dodatkowym plusem jest możliwość (mimo iż w &lt;strong&gt;React Native&lt;/strong&gt; wykorzystuje się komponenty, a nie tagi html) używania części logiki między aplikacją webową w &lt;strong&gt;React&lt;/strong&gt; a klientem w &lt;strong&gt;React Native&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Kto używa React Native?&lt;/h2&gt;
&lt;p&gt;Przede wszystkim firma odpowiedzialna za jego rozwój - &lt;strong&gt;Facebook&lt;/strong&gt;. Dodatkowo znajdziemy go u takich firm jak: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Walmart&lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;li&gt;Soundcloud&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mam nadzieję że powyższy post chociaż trochę przybliżył ci czym jest React Native, i dlaczego warto go używać. Dodam również że warto także mieć na oku stworzonę przez &lt;strong&gt;Google&lt;/strong&gt; technologie &lt;strong&gt;Flutter&lt;/strong&gt; która zdobywa popularność i dla wielu może stanowić przyszłość aplikacji mobilnych. Kto wie, może znajdzie ona swoje miejsce w kolejnych postach?&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Szybkie Porady #1 - Jaki system operacyjny wybrać?]]></title><description><![CDATA[Jaki system operacyjny wybrać?W zasadzie większość użytkowników można podzielić na 3 obozy: zwolenników Windowsa, Linuksa oraz macOS. Jakie…]]></description><link>https://kamilmichna.github.io//2019/5/szybka-porada-1/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/5/szybka-porada-1/</guid><pubDate>Mon, 27 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Jaki system operacyjny wybrać?&lt;/h1&gt;
&lt;p&gt;W zasadzie większość użytkowników można podzielić na 3 obozy: zwolenników &lt;strong&gt;Windowsa&lt;/strong&gt;, &lt;strong&gt;Linuksa&lt;/strong&gt; oraz &lt;strong&gt;macOS&lt;/strong&gt;. Jakie są wady i zalety tych systemów dla programisty? Przyjrzyjmy się im bliżej!&lt;/p&gt;
&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;Zdecydowanie najpopularniejszy system operacyjny. Jego obsługa jest najłatwiejsza, a integracja z urządzeniami peryferyjnymi bajecznie prosta. Jedną z jego wad jest bardzo mała możliwość modyfikacji, CMD czyli odpowiednik Terminala jest w porównaniu z kuzynem z Linuksa i macOS bardzo... ubogi, a instalacja niektórych narzędzi programistycznych mimo że  bardzo prosta może trwać dłużej niż identyczne operacje na Linuksie - korzystamy najczęściej z graficznych instalatorów, a następnie musimy dodawać daną komendę do &lt;strong&gt;PATH&lt;/strong&gt;, natomiast w Linuksie i macOS identyczny rezultat osiągniemy jedną, dwiema komendami.&lt;/p&gt;
&lt;p&gt;Dla kogo jest Windows?:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dla grafików, montażystów&lt;/li&gt;
&lt;li&gt;dla graczy&lt;/li&gt;
&lt;li&gt;programiści technologii silnie związanych z Microsoft, na przykład C#.&lt;/li&gt;
&lt;li&gt;osoby korzystające z pakietu Adobe, i niewyobrażające sobie używanie zamiennika.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oczywiście nie należy zapominać że wszystkie powyższe rzeczy można osiągnąć na innych systemach - jest to jedynie nieco trudniejsze.&lt;/p&gt;
&lt;h2&gt;Linuks&lt;/h2&gt;
&lt;p&gt;Linuks to darmowy system operacyjny. Jego głównymi zaletami są możliwość customizacji, szybkość działania oraz wolność oprogramowania. Mimo wielu mitów na temat tego systemu - używam go na codzień i po przyzwyczajeniu się do niego i odrobinie nauki jest naprawdę o wiele wygodniejszy od &lt;strong&gt;Windowsa&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dla kogo jest Linuks?:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Praktycznie większość programistów&lt;/li&gt;
&lt;li&gt;Osoby chcące scustomizować swój system&lt;/li&gt;
&lt;li&gt;Osoby chcące darmowego i wygodnego systemu.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MacOS&lt;/h2&gt;
&lt;p&gt;Wydaje się że jest to połączenie dwóch powyższych systemów. Bardzo szybki i stabilny, łączy bardzo dobry terminal znany z Linuksa z możliwością uruchomienia min pakietu Adobe. Bardzo dobry wybór dla frontendowca, minusem jest jednak cena&lt;/p&gt;
&lt;p&gt;Dla kogo jest macOS?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;graficy&lt;/li&gt;
&lt;li&gt;montażyści&lt;/li&gt;
&lt;li&gt;programiści dla macOS / iOS potrzebujący sprzętu Apple&lt;/li&gt;
&lt;li&gt;Osoby ceniące szybkość działania i jakość &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mam nadzieję że pomogłem wam podjąć decyzję w wyborze systemu operacyjnego, pamiętajcie jednak że to nie wasz setup ale to co na nim robicie ma znaczenie ;)&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Jak dynamicznie dodawać treść do strony?]]></title><description><![CDATA[Dynamiczne dodawanie treści do strony.  W pewnym momencie statyczne strony, oparte o hmtl css i javascript przestają nam wystarczać…]]></description><link>https://kamilmichna.github.io//2019/5/dynamiczne/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/5/dynamiczne/</guid><pubDate>Wed, 22 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Dynamiczne dodawanie treści do strony.&lt;/h1&gt;
&lt;p&gt;  W pewnym momencie statyczne strony, oparte o &lt;strong&gt;hmtl&lt;/strong&gt; &lt;strong&gt;css&lt;/strong&gt; i &lt;strong&gt;javascript&lt;/strong&gt; przestają nam wystarczać - potrzebujemy szybkiego sposobu na dodawanie nowej treści do strony. Gdybyśmy na przykład prowadzili bloga, i przy każdym nowym wpisie musieli ręcznie modyfikować pliki strony, a następnie wysyłać całość na serwer, zajęło by nam to mnóstwo czasu, naraziło by nas też na pomyłki - ręczne dodawanie każdej podstrony i modyfikacja treści na innych nawet dla doświadczonego webmastera może okazać się nieco skomplikowane i przy odrobinie zgubnej rutyny spowodować poważne  błędy w funkcjonowaniu serwisu. Potrzebujemy więc narzędzia, tylko jakiego? Są dwa główne sposoby na rozwiązanie naszego problemu.&lt;/p&gt;
&lt;h2&gt;Podejście nr 1 - CMS (content management system)&lt;/h2&gt;
&lt;p&gt;Bardzo popularne rozwiązanie. Polega ono na stworzeniu systemu przy użyciu jakiegoś języka działającego po stronie serwera (najpopularniejsze to PHP, Node.js czyli backendowe wcielenie JavaScript i inne). Dane o na przykład postach i ich treści zapisywane są przez skrypt serwerowy w bazie danych, a gdy jest to potrzebne, na przykład gdy ktoś wchodzi na naszą stronę, dane są pobierane i bardzo szybko &quot;wrzucane&quot; do szablonu strony. Rozwiązanie takie ma kilka ważnych wad, jak i zalet:&lt;/p&gt;
&lt;h2&gt;Zalety CMS:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;łatwiejsze zarządzanie dużym serwisem&lt;/li&gt;
&lt;li&gt;uruchomienie serwisu z popularnym CMS, na przykład Wordpress jest bardzo proste&lt;/li&gt;
&lt;li&gt;łatwiejsze tworzenie kopi zapasowych&lt;/li&gt;
&lt;li&gt;łatwiej tworzyć stronę z kilkoma autorami publikującymi treści niezależnie od siebie&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Wady CMS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;działanie wolniejsze niż w przypadku stron statycznych (aplikacja musi pobrać dane z bazy, a dopiero później wygenerować na ich podstawie widok)&lt;/li&gt;
&lt;li&gt;systemy zarządzania treścią narażone są na ataki - w przypadku stron statycznych jedynym miejscem w którym zazwyczaj możemy obawiać się ataku który zaszkodzi naszej stronie jest nasze konto na hostingu - w przypadku systemu CMS zazwyczaj dodatkowo narażone na atak są: baza danych oraz panel administracyjny naszego serwisu, często powinniśmy również zatroszczyć się o to czy wtyczki, których niektóre serwisy mają naprawdę sporo nie są szczególnie podatne na ataki&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Podejście nr 2 - static site generators&lt;/h2&gt;
&lt;p&gt;Rozwiązanie które ostatnimi czasy zyskuje dużą popularność. Na czym polega? W zasadzie dużą część wad podejścia nr 1 stanowią: wolne działanie i stosunkowo duże narażenie na ataki. Wyżej wymienione minusy nie dotyczą stron statycznych, jednak pisanie na przykład bloga całkowicie &quot;z palca&quot; to dosyć karkołomny pomysł. Generatory stron statycznych stanowią jednak bardzo dobry kompromis pomiędzy tymi dwoma rozwiązaniami.&lt;/p&gt;
&lt;h2&gt;Jak to działa?&lt;/h2&gt;
&lt;p&gt;W dużym skrócie - na podstawie pewnych danych - na przykład postów zapisanych jako zwykłe pliki tekstowe nasz generator tworzy nam za pomocą jednej komendy pliki statyczne, wstrzykując odpowiednią treść w odpowiednie dla niej miejsce. Następnie jedyne co nam pozostaje to wrzucić nowe pliki na nasz serwer i gotowe :)&lt;/p&gt;
&lt;h2&gt;Zalety generatorów stron statycznych:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bardzo szybkie. Niektóre generatory dodatkowo  minifikują i kompresują nasze pliki tak, że strona działa szybciej niż w przypadku pisania strony &quot;z palca&quot;!&lt;/li&gt;
&lt;li&gt;Bezpieczne. Tutaj podobnie jak w przypadku stron statycznych nie musimy się martwić o atak na bazę danych naszej strony lub jej panel administracyjny. Jedyne o co musimy się martwić to dostęp do naszego hostingu.&lt;/li&gt;
&lt;li&gt;Tanie. Generatory stron statycznych znacznie obniżają koszty utrzymania w porównaniu do systemów CMS. Oszczędzimy min. na bazie danych oraz na hostingu - strona stworzona przy pomocy generatora będzie działać płynnie nawet na tańszym hostingu - co nie zawsze jest możliwe przy &lt;strong&gt;CMS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Wady generatorów statycznych:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Trudniejsze w skonfigurowaniu niż standardowe CMS&lt;/li&gt;
&lt;li&gt;Trudniej pracować nad treścią strony w kilka osób. &lt;/li&gt;
&lt;li&gt;Trudniej skonfigurować niektóre usługi, np mailing ze względu na brak kodu po stronie serwera&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CMS czy generator? Co wybrac?&lt;/h2&gt;
&lt;p&gt;  Odpowiedź jest jedna: to zależy. Jeżeli planujesz stworzenie dużego serwisu, nad którym prawdopodobnie będzie pracowało kilku lub nawet kilkunastu redaktorów, CMS okaże się najlepszym wyjściem. Jeżeli jednak chcesz stworzyć stronę na którą będzie można szybko i dynamicznie dodawać treść, a przy tym ma być ona tania i szybka, oraz będzie zarządzana przez jedną lub maksymalnie kilka osób to generator stron statycznych wydaje się idealnym rozwiązaniem&lt;/p&gt;
&lt;h2&gt;No okej, wiem już co wybrać, ale jakie narzędzia mam do wyboru:&lt;/h2&gt;
&lt;p&gt;Lista popularnych narzędzi z obu stron &quot;barykady&quot; jest bardzo duża. Oto kilka najpopularniejszych pozycji:&lt;/p&gt;
&lt;h2&gt;CMSY:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wordpress&lt;/li&gt;
&lt;li&gt;Joomla&lt;/li&gt;
&lt;li&gt;Drupal&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Generatory stron statycznych:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gatsby.js&lt;/li&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wiele wiele więcej! Mam nadzieję że chociaż trochę pomogłem ci w dodaniu odrobiny życia na twojej stronie ;)&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Biblioteka create-react-app 3.0 - co nowego?]]></title><description><![CDATA[create-react-app 3.0 - co nowego?Całkiem niedawno, bo na początku maja udostępniono nową wersję popularnego i używanego przez wielu…]]></description><link>https://kamilmichna.github.io//2019/5/create-react-app-3/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/5/create-react-app-3/</guid><pubDate>Sun, 19 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;create-react-app 3.0 - co nowego?&lt;/h1&gt;
&lt;h2&gt;Całkiem niedawno, bo na początku maja udostępniono nową wersję popularnego i używanego przez wielu developerów pracujących z Reactem narzędzia do szybkiego tworzenia gotowego, podstawowego projektu.&lt;/h2&gt;
&lt;p&gt;Aby zainstalować wersję &gt;= 3.0 użyj polecenia &lt;code class=&quot;language-text&quot;&gt;npm i -g create-react-app&lt;/code&gt;. Prawdopodobnie będziesz musiał również użyć &lt;code class=&quot;language-text&quot;&gt;sudo&lt;/code&gt;. Aby sprawdzić wersję wpisz: &lt;code class=&quot;language-text&quot;&gt;create-react-app -V&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Oto najważniejsze nowości nowej wersji:&lt;/p&gt;
&lt;h2&gt;Komponenty funkcyjne zamiast komponentów opartych na klasach&lt;/h2&gt;
&lt;p&gt;To chyba jak dla mnie najważniejsza zmiana. Narzędzie zamienia nam komponenty oparte o klasę Component, w zamian oferując komponenty funkcyjne. Oczywiście wiąże się to również z używaniem &lt;strong&gt;React Hooks&lt;/strong&gt; zamiast &lt;strong&gt;setState&lt;/strong&gt;. Poniżej przykład tego samego komponentu napisanego z użyciem klasy oraz komponentu czysto funkcyjnego:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Ustawianie bazowego  URl&lt;/h2&gt;
&lt;p&gt;Zapewne często zdażyło wam się mieć coś takiego w swoim imporcie:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Component &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;../../../../../Component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Teraz możemy rozwiązać to, określając tzw baseUrl w naszym pliku &lt;strong&gt;jsconifg.json&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;baseUrl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;src&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Teraz coś takiego: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &apos;src&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;components&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Component&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;zostaje zamienione na to:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Menu &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;components/Menu&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Ważną zmianą w  create-react-app od wersji 3.0 jest dostępna w narzędziu najnowsza wersja Jest, która pozwala min na transpilację plików TypeScript&lt;/h2&gt;
&lt;p&gt;Mam nadzieję że przekonałem was do zaktualizowania &lt;strong&gt;create-react-app&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Biblioteka Webu #2 - React]]></title><description><![CDATA[Biblioteka webu #2: Czym jest React?React to obecnie najpopularniejszy framework JavaScript, wykorzystywany w szeroko pojętym frontendzie…]]></description><link>https://kamilmichna.github.io//2019/5/biblioteka-webu-2/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/5/biblioteka-webu-2/</guid><pubDate>Fri, 17 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Biblioteka webu #2: Czym jest React?&lt;/h1&gt;
&lt;p&gt;React to obecnie najpopularniejszy framework JavaScript, wykorzystywany w szeroko pojętym frontendzie. Spotkamy go nawet przy tworzeniu aplikacji desktopowych (Proton Native) jak i aplikacji mobilnych (React Native). Jego najpopularniejszym zastosowaniem jest jednak tworzenie szybkich oraz interaktywnych aplikacji działających w przeglądarce. Przyjżyjmy się bliżej jego historii, przyszłości i sytuacji na rynku pracy!&lt;/p&gt;
&lt;h2&gt;Szyczypta historii&lt;/h2&gt;
&lt;p&gt;Pierwsze wydanie &lt;strong&gt;Reacta&lt;/strong&gt; powstało w 2013 roku z inicjatywy jednego z programistów Facebooka, Jordana Walke. Zainspirowany rozszerzeniem języka PHP - XHP developer postanowił stworzyć bibliotekę która ułatwi i przyśpieszy tworzenie interfejsów użytkownika w aplikacjach webowych. Jednym z największych wyróżników Reacta w stosunku do obecnego lidera rynku frameworków webowych w 2013 roku, Angulara było użycie virtual DOM, w przeciwieństwie do Angulara który używał &lt;strong&gt;bezpośredniego renderowania drzewa DOM&lt;/strong&gt;. &lt;/p&gt;
&lt;h2&gt;Co potrafi React?&lt;/h2&gt;
&lt;p&gt;Największą zaletą Reacta jest możliwość tworzenia &lt;strong&gt;komponentów&lt;/strong&gt;, które niezależnie od siebie możemy używać w wielu miejscach naszej aplikacji. Użycie Reacta pozwala nam dzięki temu na lepsze zarządzanie projektem, łatwiejsze zarządzanie eventami naszej strony, a także bardzo szybkie wyświetlanie i modyfikacje danych naszej aplikacji dzięki &lt;strong&gt;State&lt;/strong&gt;. Jak już wspomniałem &lt;strong&gt;Reacta&lt;/strong&gt; możemy użyć zarówno w aplikacji desktopowej, jak i mobilnej, jednak to przeglądarka jest miejscem w którym szczególnie rozwija skrzydła.&lt;/p&gt;
&lt;h2&gt;Co zostało stworzone przy użyciu React?&lt;/h2&gt;
&lt;p&gt;Chociażby strona, którą teraz czytasz! Została stworzona przy użyciu &lt;strong&gt;Gatsby.js&lt;/strong&gt; czyli generatora stron statycznych który używa &lt;strong&gt;Reacta&lt;/strong&gt; do tworzenia stron, komponentów oraz szablonów. &lt;strong&gt;Reacta&lt;/strong&gt; wykorzystują też takie giganty branży IT jak:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Właściwie cały interfejs powyższych aplikacji napisany jest w React. Chyba nie musze nic więcej mówić aby udowodnić jak potężne to narzędzie, prawda?&lt;/p&gt;
&lt;h2&gt;Sytuacja wśród frameworków&lt;/h2&gt;
&lt;p&gt;Obecnie istnieje trójka największych i najbardziej liczących się frameworków webowych. Są nimi: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Angular &lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Najpopularniejszym z wyżej wymienionych jest React. Niech nie zwiedzie was liczba gwiadek - mimo iż na chwilę obecną &lt;strong&gt;Vue&lt;/strong&gt; może pochwalic się prawie 140 tysiącami a &lt;strong&gt;React&lt;/strong&gt; &quot;jedynie&quot; niemal 130 tysiącami niech was to nie zwiedzie - liczba tzw forków, osób wspierających i pomagających rozwijać &lt;strong&gt;Reacta&lt;/strong&gt; mówi sama za siebie. &lt;/p&gt;
&lt;h2&gt;Sytuacja na rynku pracy&lt;/h2&gt;
&lt;p&gt;Jeżeli chodzi o sytuację na rynku pracy, React radzi sobie bardzo podobnie do Angulara. Poza czołówką pozostaje Vue, w którym obecnie trochę ciężej znaleść pracę, jednak jego popularnośc ciągle rośnie i według mnie niedługo dogoni dominiującą parę. Każdy z tych frameworków jest odrobinę lepszy w czymś innym, ucząc się jednak Reacta albo Angulara na pewno nie będziecie żałować że poświęciliście czas na naukę technologii której nie potrzebują pracodawcy.&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Duże zmiany!]]></title><description><![CDATA[Cześć!Po dłuższym czasie nieobecności nadszedł czas na duże zmiany na blogu. Po pierwsze - odświeżona szata graficzna, po drugie postaram…]]></description><link>https://kamilmichna.github.io//2019/5/zmiany/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/5/zmiany/</guid><pubDate>Thu, 16 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Cześć!&lt;/h1&gt;
&lt;h2&gt;Po dłuższym czasie nieobecności nadszedł czas na duże zmiany na blogu. Po pierwsze - odświeżona szata graficzna, po drugie postaram się o częstsze i ciekawsze posty, jak również prowadzenie kilku serii z tworzenia od podstaw jakiegoś projektu. Stay tuned i do zobaczenia!&lt;/h2&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Biblioteka Webu #1 - Parcel.js]]></title><description><![CDATA[Biblioteka Webu #1 - Parcel.js.Tym postem zaczynam nową serię o nazwie Biblioteka Webu. Będę w niej zajmował się krótkim przedstawianiem…]]></description><link>https://kamilmichna.github.io//2019/4/biblioteka-webu-1/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/4/biblioteka-webu-1/</guid><pubDate>Fri, 26 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Biblioteka Webu #1 - Parcel.js.&lt;/h1&gt;
&lt;h2&gt;Tym postem zaczynam nową serię o nazwie Biblioteka Webu. Będę w niej zajmował się krótkim przedstawianiem ciekawych bibliotek oraz technologii związanych z webdevem, zarówno od strony frontendu jak i backendu. Dzisiaj na warsztat weźmiemy Parcel.js. Do dzieła!&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://parceljs.org/assets/logo.svg&quot; alt=&quot;&amp;#x22;Parcel js logo&amp;#x22;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parcel&lt;/strong&gt; to jak możemy przeczytać na &lt;a href=&quot;https://parceljs.org/&quot;&gt;jego stronie głównej&lt;/a&gt; &lt;strong&gt;Oszałamiająco szybki, niewymagający konfiguracji program tworzący pakiety&lt;/strong&gt;. Dlaczego warto go poznać? &lt;strong&gt;Parcel&lt;/strong&gt; pozwala nam na:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Szybkie budowanie naszej aplikacji&lt;/li&gt;
&lt;li&gt;Automatyczne transformacje kodu&lt;/li&gt;
&lt;li&gt;Dzielenie kodu bez żadnej konfiguracji&lt;/li&gt;
&lt;li&gt;Szybki reload aplikacji w przeglądarce&lt;/li&gt;
&lt;li&gt;Wyświetlanie błędów w kodzie w przystępny sposób&lt;/li&gt;
&lt;li&gt;Jest bardzo szybki w porównaniu z podobnymi aplikacjami.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Duża część, zwłaszcza osób początkujących ma duży problem z odpowiednią konfiguracją na przykład Webpacka. Parcel rozwiązuje ten problem, jest również świetnym rozwiązaniem do pomniejszych projektów. Jak go użyć?&lt;/h2&gt;
&lt;p&gt;Załóżmy dosyć typowy scenariusz - mamy jedną prostą aplikację webową - żadnych frameworków, jedynie kilka plików Javascript, każdy z osobnym modułem którym musi zająć się nasz &lt;strong&gt;module bundler&lt;/strong&gt; oraz kilka plików &lt;strong&gt;.scss&lt;/strong&gt; które musimy przetranspilowac na css, no i oczywiście plik &lt;strong&gt;index.html&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Struktura katalogu będzie wyglądać z grubsza tak:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;--project
    index.html
    --style
        main.scss
    --script
        main.js
        mainTests.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oczywiście struktura jest praktycznie dowolna - mój przykład po prostu będzie odnosił się do dokładnie takiej.&lt;/p&gt;
&lt;p&gt;Na początku przy użyciu &lt;strong&gt;npm&lt;/strong&gt; zainstalujmy &lt;strong&gt;Parcela&lt;/strong&gt; globalnie: &lt;code class=&quot;language-text&quot;&gt;npm install -g parcel-bundler&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;Wszystko przebiegło po naszej myśli? To super! Przejdźmy dalej:&lt;/h2&gt;
&lt;p&gt;Parcel, jak praktycznie każdy module bundler musi mieć podany jakiś plik od którego zacznie budowanie naszej paczki. W przypadku &lt;strong&gt;Parcela&lt;/strong&gt; dobrze podać plik &lt;strong&gt;Html&lt;/strong&gt; (jak w naszym przypadku) lub na przykład plik &lt;strong&gt;Javscript&lt;/strong&gt;. Uzupełnijmy jednak wpierw nasze pliki kodem:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;//index.html
&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pl&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ie=edge&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Document&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Początek przygody z parcelem!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;plik w folderze style, jest to plik scss więc użyjmy w nim na przykład zmiennej scss:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//style/style.scss&lt;/span&gt;

&lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; crimson&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 900&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dodatkowo mamy dwa pliki &lt;strong&gt;js&lt;/strong&gt; - &lt;code class=&quot;language-text&quot;&gt;main.js&lt;/code&gt; oraz &lt;code class=&quot;language-text&quot;&gt;mainTest.js&lt;/code&gt;. Zaimportujmy funkcję z &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; do &lt;code class=&quot;language-text&quot;&gt;mainTest&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//scripts/main.js&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;naszaFajnaFunkcja&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tekst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tekst&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; naszaFajnaFunkcja&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//scripts/mainTest.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; main &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./main&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Parcel działa!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak pewnie zauważyłeś, zarówno style jak i javascript nie są podlinkowane w naszym &lt;strong&gt;index.html&lt;/strong&gt;. Pora więc zająć się tym. Zamieńmy tekst strony na następujący: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pl&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ie=edge&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Document&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./style/style.scss&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Początek przygody z parcelem!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./scripts/mainTests.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Myślę że link do style.scss nie powinien budzić wątpliwości, dlaczego jednak podlinkowaliśmy mainTest.js a nie main? Sprawa jest bardzo prosta - musimy podlinkować moduł od którego Parcel zacznie budowanie - a to mainTest &quot;zasysa&quot; funkcję zdefiniowaną w main.
Aby teraz użyć &lt;strong&gt;Parcela&lt;/strong&gt; wejdźmy w terminalu lub cmd do folderu zawierającego nasz katalog projektu, a następnie po protu użyjmy polecenia &lt;code class=&quot;language-text&quot;&gt;parcel index.html&lt;/code&gt;. &lt;strong&gt;Banalne prawda?&lt;/strong&gt;. Po chwili w terminalu pojawi nam się link do naszej strony działającej najprawdopodobniej pod adresem: &lt;code class=&quot;language-text&quot;&gt;http://localhost:1234/&lt;/code&gt;. To tutaj działą nasz hot reloading w przeglądarce, a aby wstawić stronę na przykład na hosting, wystarczy użyć do tego polecenia &lt;code class=&quot;language-text&quot;&gt;parcel build index.html --public-url ./&lt;/code&gt; a następnie pliki z katalogu &lt;strong&gt;dist&lt;/strong&gt; wrzucić na dowolny hosting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mam nadzieję że zadziałało jak trzeba!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #8.2 - własne podstawowe REST API w Koa.js]]></title><description><![CDATA[Rest Api w koa.js.Ostatnio zajmowaliśmy się pobieraniem danych z REST Api zewnętrznego serwera. Jak samemu stworzyć takie Api? Przekonamy…]]></description><link>https://kamilmichna.github.io//2019/3/koa-api2/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/3/koa-api2/</guid><pubDate>Sun, 24 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Rest Api w koa.js.&lt;/h1&gt;
&lt;p&gt;Ostatnio zajmowaliśmy się pobieraniem danych z REST Api zewnętrznego serwera. Jak samemu stworzyć takie Api? Przekonamy się dzisiaj!&lt;/p&gt;
&lt;h2&gt;Jakie rodzaje zapytań wysępują w REST Api?&lt;/h2&gt;
&lt;p&gt;Tak naprawdę w naszym &lt;strong&gt;REST Api&lt;/strong&gt; możemy wykorzystać wszyskie metody &lt;strong&gt;HTTP&lt;/strong&gt;, jednak my zajmiemy się tymi najpopularniejszymi, oraz ich rolą. Do grupy 4 najczęściej używanych metod, które są niejako &lt;strong&gt;must have&lt;/strong&gt; każdej aplikacji o dużym zasobie danych to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Metoda &lt;strong&gt;GET&lt;/strong&gt;:&lt;/h2&gt;
&lt;p&gt;Służy ona do pobierania danych z serwera. Powinniśmy ich używać tylko do pobierania danych, i tylko takich, które nie są zbyt &lt;code class=&quot;language-text&quot;&gt;tajne&lt;/code&gt; - metoda get pewne parametry &quot;przymyca&quot; w url zapytania. Przykładowo, jeżli stworzylibyśmy formularz z loginem i hasłem (&lt;strong&gt;czego nie powinniśmy robić!&lt;/strong&gt;) url wyglądałby dokładnie tak: &lt;code class=&quot;language-text&quot;&gt;https:\\strona.com?login=naszfajnylogin%password=naszefajnehaslo&lt;/code&gt;. Niezbyt bezpieczne, prawda? Dodatkowo zapytania &lt;strong&gt;get&lt;/strong&gt; są przechowywane na przykład w historii przeglądarki. Jednym słowem, nie używaj ich nigdy do wysyłania danych, a jedynie do ich pobierania.&lt;/p&gt;
&lt;h2&gt;Metoda &lt;strong&gt;POST&lt;/strong&gt;:&lt;/h2&gt;
&lt;p&gt;Metoda służąca do wysyłania danych. Nie jest zapisywana w historii przeglądarki, a w &lt;strong&gt;REST API&lt;/strong&gt; wykorzystuje się ją do tworzenia nowych zasobów, na przykład stworzenia nowego użytkownika w bazie danych.&lt;/p&gt;
&lt;h2&gt;Metoda &lt;strong&gt;PUT&lt;/strong&gt;:&lt;/h2&gt;
&lt;p&gt;Metoda bardzo podobna do metody &lt;strong&gt;POST&lt;/strong&gt;, z tą różnicą że używana jest do &lt;strong&gt;aktualizacji danych&lt;/strong&gt;, a nie ich tworzenia.&lt;/p&gt;
&lt;h2&gt;Metoda &lt;strong&gt;DELETE&lt;/strong&gt;:&lt;/h2&gt;
&lt;p&gt;Podobna do dwóch poprzednich, służy jednak do usuwania danych.&lt;/p&gt;
&lt;h1&gt;Tworzymy REST Api w KOA&lt;/h1&gt;
&lt;p&gt;Na początku stwórzmy sobie nowy katalog, a w nim użyjmy dwóch znanym nam już komend: &lt;code class=&quot;language-text&quot;&gt;npm init&lt;/code&gt; oraz &lt;code class=&quot;language-text&quot;&gt;npm i koa&lt;/code&gt;, aby stworzyć plik &lt;strong&gt;package.json&lt;/strong&gt; a następnie zainstalować &lt;strong&gt;koa&lt;/strong&gt;. Stwórzmy także jeden plik - server.js w którym będą znajdować się cały nasz kod. Zainstalujmy także &lt;strong&gt;koa-router&lt;/strong&gt;, ponieważ to on obsługuje wymienione wyżej metody. Zrobimy to za pomocą polecenia &lt;code class=&quot;language-text&quot;&gt;npm i koa-router&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wszystkie nasze metody zaimplementowane w &lt;strong&gt;koa&lt;/strong&gt; wyglądają tak: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allowedMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;zapytanie GET&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;zapytanie POST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/put&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;zapytanie PUT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;zapytanie DELETE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;server is working&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;działanie &lt;strong&gt;GET&lt;/strong&gt; możemy sprawdzić wchodząc na adres naszego serwera, czyli &lt;code class=&quot;language-text&quot;&gt;http://localhost:3000/&lt;/code&gt;, a &lt;strong&gt;POST&lt;/strong&gt; wysyłając tam metodą &lt;strong&gt;POST&lt;/strong&gt; dane z formularza w &lt;strong&gt;HTML&lt;/strong&gt;. Niestety, &lt;strong&gt;DELETE&lt;/strong&gt; ani &lt;strong&gt;PUT&lt;/strong&gt; nie są obsługiwane przez &lt;strong&gt;formularz HTML&lt;/strong&gt;, więc ich działanie sprawdzimy z poziomu &lt;strong&gt;fetch Api&lt;/strong&gt;, ale to już w przyszłym wpisie ;).&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #8.1 - podstawowe REST Api]]></title><description><![CDATA[Podstawowe REST Api.Dzisiejszy tytuł jest nieco zwodniczy - co prawda nie będziemy korzystać z KOA, ale nauczymy się jak odpytać Api o dane…]]></description><link>https://kamilmichna.github.io//2019/3/koa-api/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/3/koa-api/</guid><pubDate>Sun, 10 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Podstawowe REST Api.&lt;/h1&gt;
&lt;p&gt;Dzisiejszy tytuł jest nieco zwodniczy - co prawda nie będziemy korzystać z KOA, ale nauczymy się jak odpytać Api o dane, co przyda nam się w następnych postach.&lt;/p&gt;
&lt;h2&gt;Czym jest REST Api?&lt;/h2&gt;
&lt;p&gt;REST Api, to w dużym skrócie taki interfejs w napisanym przez nas oprogramowaniu, który pozwala pobierać innym aplikacjom kluczowe do ich działania dane.&lt;/p&gt;
&lt;h2&gt;Po co mi REST Api skoro umiem przekazywać dane do strony w Koa?&lt;/h2&gt;
&lt;p&gt;Przewagi REST Api nad powyższym rozwiązaniem są dwie - chociaż oba rozwiązania są dobre, REST Api pozwala nam po pierwsze pobierać dane bez potrzeby przeładowywania naszej strony, a po drugie na korzystanie z naszych danych przez wiele aplikacji. Może teraz wydaje się to dla Ciebie lekko abstrakcyjne - w końcu interesuje nas napisanie funkcjonalnego serwera w &lt;strong&gt;Koa&lt;/strong&gt;, a nie &lt;strong&gt;kilku&lt;/strong&gt; aplikacji, i to jeszcze zapewne w różnych językach, ale wyobraź sobie taki przykład: razem z zespołem programistów zakładacie startup - nowy, rewolucyjny portal społecznościowy. Odpowiadasz w nim właśnie za &lt;strong&gt;backend&lt;/strong&gt;, czyli serwer w &lt;strong&gt;koa&lt;/strong&gt; oraz bazę danych zawierającą na przykład informacje o użytkownikach - ich imiona, nazwiska, maile, wpisy. Sposób który już znamy - przekazywanie informacji do pliku przy renderowaniu sprawdził by się - serwer pobierze dane o użytkowniku, a następnie wyrenderuje template strony uzupełniając go odpowiednimi informacjami. Problem zaczyna się jednak, gdy oprócz aplikacji webowej, osoby w twoim zespole piszą także aplikacje na przykład na &lt;strong&gt;Androida w języku JAVA, aplikację na Ios w języku Swift, oraz aplikację natywną na system Windows w języku C#&lt;/strong&gt;. W jaki sposób mają oni uzyskać dane? Właśnie przez REST Api, które &lt;strong&gt;Ty&lt;/strong&gt; stworzysz. Aby nie narobić bałaganu, także klient przeglądarkowy - czyli strona powinna pobierać dane właśnie z Api, a nie poprzez dane przekazywane przy renderowaniu.&lt;/p&gt;
&lt;h2&gt;Do dzieła!&lt;/h2&gt;
&lt;p&gt;Stwórzymy sobie prostą stronę &lt;strong&gt;.html&lt;/strong&gt; w dowolnym wybranym przez ciebie miejscu na dysku. Większość naszych zapytań będzie się opierać na &lt;strong&gt;javascriptcie&lt;/strong&gt;, więc po prostu wklejmy do naszego pliku taki kod:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ie=edge&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Document&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
        &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Działa!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a następnie otwórz w przeglądarce. Jeśli wyświetli ona komunikat o treści &lt;strong&gt;Działa!&lt;/strong&gt; to wszystko idzie po naszej myśli.&lt;/p&gt;
&lt;h2&gt;Zapytanie do api.&lt;/h2&gt;
&lt;p&gt;Wykorzystajmy, w ramach testu darmowe api dostępne w internecie. Zawiera ono podobnie jak nasz przykład, listę użytkowników, wraz z danymi o nich. Aby odpytać nasze REST Api, użyjemy &lt;strong&gt;fetch Api&lt;/strong&gt; w javascript. Kod który będę teraz pisał, musi znajdować się w tagu &lt;strong&gt;script&lt;/strong&gt;, tam gdzie nasz alert (który możesz już usunąć).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; naszego api&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jako url użyjemy &lt;code class=&quot;language-text&quot;&gt;https://jsonplaceholder.typicode.com/users&lt;/code&gt;, ponieważ właśnie spod tego adresu mozemy pobrać dane o naszych użytkownikach. Zwróci nam to obiekt &lt;strong&gt;Promise&lt;/strong&gt;, a więc następnie użyjemy &lt;strong&gt;then&lt;/strong&gt;, gdzie wykorzystamy specjalną funkcję która przekonwertuje dane w formacie &lt;strong&gt;JSON&lt;/strong&gt; (najczęściej taki format wykorzystuje sie przy komunikacji z serwerem) na znany nam obiekt w javascript.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;https://jsonplaceholder.typicode.com/users&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Powyższy kod wyświetli w konsoli obiekt zawierający dane użytkowników. Teraz, dla przykładu wyświetlmy imiona wszystkich użytkowników:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;https://jsonplaceholder.typicode.com/users&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I voila! Konsola wyświetliła nam listę imion i nazwisk wszystkich użytkowników.&lt;/p&gt;
&lt;h2&gt;Nauczyliśmy się już podstaw korzystania z REST Api po stronie klienta, w następnym poście nauczymy się jak stworzyć taki interfejs samemu, w koa.&lt;/h2&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #7 - pliki statyczne]]></title><description><![CDATA[Koa - pliki statyczne.W dzisiejszym tutorialu odkryjemy, jak sprawić aby nasz serwer hostował pliki statyczne takie jak zdjęcia lub pliki…]]></description><link>https://kamilmichna.github.io//2019/2/koa7/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/2/koa7/</guid><pubDate>Wed, 13 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Koa - pliki statyczne.&lt;/h1&gt;
&lt;h2&gt;W dzisiejszym tutorialu odkryjemy, jak sprawić aby nasz serwer hostował pliki statyczne takie jak zdjęcia lub pliki kaskadowych arkuszów styli.&lt;/h2&gt;
&lt;p&gt;Za przykład weźmiemy sobie znany nam z poprzednich postów plik &lt;strong&gt;index.pug&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pug&quot;&gt;&lt;pre class=&quot;language-pug&quot;&gt;&lt;code class=&quot;language-pug&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;html&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;title&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;content&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zmodyfikujmy także nasz plik &lt;strong&gt;router.js&lt;/strong&gt; - póki co nie hostuje on naszego pliku &lt;strong&gt;index.pug&lt;/strong&gt;. Zamieńmy więc to:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


router
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;forms.pug&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/sendData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`WARTOŚĆ POLA TEKSTOWEGO: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;na to:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;



router
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;index.pug&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    


module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Teraz nasza strona dostępna jest pod adresem &lt;strong&gt;&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;
&lt;h2&gt;Dodawanie arkuszy styli do strony.&lt;/h2&gt;
&lt;p&gt;Stwórzmy sobie zatem katalog &lt;strong&gt;public&lt;/strong&gt; w naszym projekcie. Niech znajduje się on w jego katalogu głównym. Będzie nam służył jako miejsce w którym zgromadzimy wszystkie pliki statyczne - takie jak &lt;strong&gt;arkusze styli, strony w czystym html czy zdjęcia&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Struktura naszego projektu powinna teraz wyglądać tak:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- node_modules
- views
    - index.pug
- public
- main.js
- package.json
- package.lock.json
- router.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;W katalogu &lt;strong&gt;public&lt;/strong&gt; utwórzmy sobie podkatalog &lt;strong&gt;styles&lt;/strong&gt; (który będzie zawierał pliki css naszego projektu) a w nim prosty plik &lt;strong&gt;style.css&lt;/strong&gt; który będzie zawierał bardzo prostą regułę - cały tekst na stronie ma być czerwony. Tak naprawdę jest kompletnie obojętne jakie reguły css zdefiniujemy wewnątrz pliku, ale w ten sposób będziemy mogli łatwo sprawdzić czy wszystko działa tak jak powinno&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A w ten sposób podłączymy sobie nasz plik css do pliku index.pug:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pug&quot;&gt;&lt;pre class=&quot;language-pug&quot;&gt;&lt;code class=&quot;language-pug&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;html&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;title&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;link&lt;span class=&quot;token attributes&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./styles/style.css&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;content&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak jednak łatwo zauważyć, kolor czcionki na naszej stronie nie zmienia się. &lt;strong&gt;Musimy więc tak skonfigurować nasz serwer, aby przy zapytaniu o jakikolwiek plki statyczny szukał go w katalogu public&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Jak to osiągnąć?&lt;/h2&gt;
&lt;p&gt;Przyda nam się do tego kolejny middleware o wiele mówiącej nazwie &lt;strong&gt;koa-static&lt;/strong&gt;. Zainstalujemy go poleceniem &lt;code class=&quot;language-text&quot;&gt;npm install koa-static&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Dodawanie middleware do aplikacji&lt;/h2&gt;
&lt;p&gt;Po pomyślnej instalacji musimy dodać odrobinę kodu do naszego pliku &lt;strong&gt;main.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;koa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bodyparser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-bodyparser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; serve &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-static&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//#1&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/public/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//#2&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bodyparser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    map&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        extension&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pug&apos;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;#1&lt;/strong&gt; to import zainstalowanej przez nas wcześniej biblioteki, a &lt;strong&gt;#2&lt;/strong&gt; to definicja użycia &lt;strong&gt;koa-static&lt;/strong&gt; w naszej aplikacji. Podajemy tam jako argument absolutną ścieżkę (a więc poprzedzoną &lt;code class=&quot;language-text&quot;&gt;__dirname&lt;/code&gt;) do naszego katalogu public, co pozwoli nam uzyskać dostęp do zawartych tam plików.&lt;/p&gt;
&lt;h2&gt;Zdjęcia&lt;/h2&gt;
&lt;p&gt;Jak zatem dodać zdjęcie? W folderze public stwórzmy sobie katalog &lt;strong&gt;images&lt;/strong&gt; a do niego dodajmy zdjęcie o nazwie, na przykład &lt;strong&gt;image.jpg&lt;/strong&gt;. Następnie aby dodać je w naszym pliku &lt;strong&gt;index.pug&lt;/strong&gt; musimy dodać w sekcji body następującą linie:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pug&quot;&gt;&lt;pre class=&quot;language-pug&quot;&gt;&lt;code class=&quot;language-pug&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;img&lt;span class=&quot;token attributes&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./images/image.jpg&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;alternatywny tekst dla obrazka&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A więc teraz plik będzie wyglądał tak: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pug&quot;&gt;&lt;pre class=&quot;language-pug&quot;&gt;&lt;code class=&quot;language-pug&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;html&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;title&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;link&lt;span class=&quot;token attributes&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./styles/style.css&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;content&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;img&lt;span class=&quot;token attributes&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./images/image.jpg&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;alternatywny tekst dla obrazka&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #6 - Formularze]]></title><description><![CDATA[Podstawowa obsługa formularzy w Koa.Ostatnio nauczyliśmy się jak na podstawie danych z serwera tworzyć wygląd naszych podstron, dzisiaj…]]></description><link>https://kamilmichna.github.io//2019/1/koa6/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/1/koa6/</guid><pubDate>Thu, 31 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Podstawowa obsługa formularzy w Koa.&lt;/h1&gt;
&lt;p&gt;Ostatnio nauczyliśmy się jak na podstawie danych z serwera tworzyć wygląd naszych podstron, dzisiaj nauczymy się komunikacji w drugą stronę - serwer odbierze dane z naszej witryny!&lt;/p&gt;
&lt;h2&gt;Zacznijmy więc od stworzenia podstrony, z formularzem&lt;/h2&gt;
&lt;p&gt;Wejdźmy zatem do naszego katalogu &lt;strong&gt;views&lt;/strong&gt; i stwórzmy tam plik o nazwie &quot;forms.pug&quot;. Nazwa jest całkowicie dowolna. Zacznijmy więc tworzyć stronę z prostym formularzem:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pug&quot;&gt;&lt;pre class=&quot;language-pug&quot;&gt;&lt;code class=&quot;language-pug&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;html&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;title&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;form&lt;span class=&quot;token attributes&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/sendData&quot;&lt;/span&gt; method&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;input&lt;span class=&quot;token attributes&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;formContent&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;input&lt;span class=&quot;token attributes&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Wyślij dane&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nasza strona zawiera prosty formularz z dwoma inputami: jeden, o typie &lt;strong&gt;text&lt;/strong&gt; będzie miejscem do którego wprowadzimy tekst który następnie wyślemy do serwera,jego name, czyli &lt;strong&gt;formContent&lt;/strong&gt; będzie nam potrzebny do uzyskania tych konkretnie danych po stronie serwera, a input o typie &lt;strong&gt;submit&lt;/strong&gt; to przycisk, który wyśle dane. Cały formularz ma atrybut &lt;strong&gt;action&lt;/strong&gt; ustawiony pod adres &lt;strong&gt;/sendData&lt;/strong&gt;, oznacza to że wszystkie dane będą wysyłane pod adres &lt;code class=&quot;language-text&quot;&gt;http://localhost:3000/sendData&lt;/code&gt;. Atrybut &lt;strong&gt;method&lt;/strong&gt; ustawiłem na wartość &lt;strong&gt;POST&lt;/strong&gt;.Na pełne &lt;strong&gt;REST API&lt;/strong&gt; przyjdzie czas niebawem.&lt;/p&gt;
&lt;h2&gt;Co chcemy osiągnąć?&lt;/h2&gt;
&lt;p&gt;Wyobraźmy sobie że podstrona z naszym formularzem to coś w rodzaju okienka czatu - chcemy po prostu wpisany tam tekst dostarczyć do serwera. Podobnie będzie to działać z kilkoma polami - jak na przykład w przypadku logowania, gdzie potrzebujemy zarówno hasła jak i loginu. &lt;/p&gt;
&lt;p&gt;Zacznijmy więc od podpięcia naszego &lt;strong&gt;forms.pug&lt;/strong&gt; pod &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt; w naszych &lt;strong&gt;routes&lt;/strong&gt;. Zedytujmy więc plik &lt;strong&gt;router.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


router
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;forms.pug&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Póki co dokładnie w ten sposób powinien przedstawiać się nasz plik z routingiem. Usunęliśmy routa wskazującego na &lt;code class=&quot;language-text&quot;&gt;/hello&lt;/code&gt;, pozostał jedynie ten wskazujący na &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;, ale teraz renderuje on nasz plik z formularzem. I dokładnie o to nam chodziło. Aby sprawdzić czy wszystko działa poprawnie wejdź pod adres &lt;code class=&quot;language-text&quot;&gt;/http://localhost:3000/&lt;/code&gt; i sprawdź czy strona rzeczywiście zawiera nasz prosty formularz. Przypomnę jedynie że &lt;strong&gt;Po zedytowaniu naszych plików takich jak main.js albo router.js należy ponownie urochomić serwer poleceniem&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;node main.js&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Reagowanie na wysłane dane&lt;/h2&gt;
&lt;p&gt;To co teraz chcemy zrobić, to odebrać dane z naszego formularza. Wysłaliśmy je pod adres &lt;code class=&quot;language-text&quot;&gt;/sendData&lt;/code&gt; metodą &lt;strong&gt;POST&lt;/strong&gt;, dodajmy więc w naszym pliku &lt;strong&gt;router.js&lt;/strong&gt; kod, który pozwoli nam zareagować na wysłane dane. Tym razem nie użyjemy w routerze &lt;strong&gt;.get&lt;/strong&gt;, a &lt;strong&gt;.post&lt;/strong&gt;, ze względu na metodę którą wysłaliśmy dane:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


router
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;forms.pug&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/sendData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;FORMULARZ ODEBRANY!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak nietrudno się domyślić, po wysłaniu danych w naszym terminalu powinien wyświetlić się napis &lt;code class=&quot;language-text&quot;&gt;FORMULARZ ODEBRANY&lt;/code&gt;. Sprawdźmy więc czy tak się dzieje.&lt;/p&gt;
&lt;h2&gt;Sukces!&lt;/h2&gt;
&lt;p&gt;Terminal wyświetlił zadany komunikat. To co nam pozostało, to sprawić aby wyświetlił również wartość pola tekstowego. Jako że znajduje się ona w obiekcie &lt;strong&gt;ctx.request.body&lt;/strong&gt;, do jego obsługi potrzebny jest nam kolejny middleware, tym razem jest to &lt;strong&gt;bodyparser&lt;/strong&gt;. Zainstalujemy go poleceniem &lt;code class=&quot;language-text&quot;&gt;node install koa-bodyparser&lt;/code&gt;. Jeżeli instalacja się powiodła, dodajmy go do naszej aplikacji. Zedytujmy więc plik &lt;strong&gt;main.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;koa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bodyparser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-bodyparser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//#1&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bodyparser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//#2&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    map&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        extension&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pug&apos;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;#1&lt;/strong&gt; to po prostu zaimportowanie naszej biblioteki, natomiast w &lt;strong&gt;#2&lt;/strong&gt; definiujemy &lt;strong&gt;bodyparser&lt;/strong&gt; jako &lt;strong&gt;middleware&lt;/strong&gt;. Przejdźmy teraz z powrotem do &lt;strong&gt;router.js&lt;/strong&gt; i zedytujmy go odpowiednio: &lt;strong&gt;ctx.request.body&lt;/strong&gt; jest obiektem, który zawiera wszystkie pola wysłane przez nasz formularz, każde z nich jest jednym z właściwości obiektu &lt;strong&gt;body&lt;/strong&gt;. Aby więc dostać się do tekstu który znajdował się w polu tekstowym o atrybucie &lt;strong&gt;name=&quot;content&quot;&lt;/strong&gt; musimy użyć &lt;strong&gt;ctx.request.body.content&lt;/strong&gt;. Po edycji nasz plik powinien wyglądać tak:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


router
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;forms.pug&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/sendData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`WARTOŚĆ POLA TEKSTOWEGO: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Od teraz przy każdym wysłaniu formularza nasz terminal wyświetli stosowny komunikat, wraz z wartością pobraną z pola tekstowego.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To tyle na dzisiaj, w następnym poradniku dowiemy się w jaki sposób skonfigurować nasz serwer tak, aby serwował pliki statyczne, czyli pliki css oraz zdjęcia&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #5 - template engines]]></title><description><![CDATA[Template engines w Koa.jsCzym są template engines?.Na to pytanie odpowiedziałem dokładniej w tym poście: Link. W skrócie przypomnę jednak że…]]></description><link>https://kamilmichna.github.io//2019/1/koa5/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/1/koa5/</guid><pubDate>Mon, 28 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Template engines w Koa.js&lt;/h1&gt;
&lt;h2&gt;Czym są template engines?.&lt;/h2&gt;
&lt;p&gt;Na to pytanie odpowiedziałem dokładniej w tym poście: &lt;a href=&quot;https://kamilmichna.github.io/2019/1/koa3&quot;&gt;Link&lt;/a&gt;. W skrócie przypomnę jednak że tak zwane &lt;strong&gt;template engines&lt;/strong&gt; to w dużym uproszczeniu często bardzo podobne składnią do &lt;strong&gt;języka html&lt;/strong&gt; &quot;foremki&quot; które pozwalają w bardzo prosty sposób dostosować treść na naszej stronie do tego, co na przykład pobiera z bazy danych nasz serwer. Nie dzieje się to co prawda dynamicznie, jak przy użyciu &lt;strong&gt;technologii AJAX&lt;/strong&gt; i pobieraniu danych na przykład z Api wystawianego przez nas serwer (czym również niebawem się zajmiemy). Dane z serwera wpływ na treść naszej strony mają tylko raz, przy jej wyrenderowaniu - czyli na przykład dane na stronie mogą zmienić się po odświeżeniu okna przeglądarki, ale nie stanie się to dynamicznie.&lt;/p&gt;
&lt;h2&gt;Zalety template engines&lt;/h2&gt;
&lt;p&gt;Przede wszystkim jest to najprostszy sposób na dostosowanie &lt;strong&gt;treści strony&lt;/strong&gt; do danych z serwera. Dzisiaj stworzymy sobie bardzo prosty przykład i przekażemy naszej stronie &lt;strong&gt;odrobinę tekstu z serwera&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Do dzieła!&lt;/h1&gt;
&lt;h2&gt;Wybór i instalacja template engine&lt;/h2&gt;
&lt;p&gt;Podobnie jak w przypadku starszego brata Koa.js czyli &lt;strong&gt;Express.js&lt;/strong&gt; do wyboru mamy ich całkiem sporo. Wymieniłem już wcześniej kilka z najpopularniejszych w poście w których omówiłem czym dokładnie są &lt;strong&gt;template engines&lt;/strong&gt;. Większość z nich oferuje bardzo podobną funkcjonalność i wybór odpowiedniego dla nas sprowadza się głównie do własnych preferencji, lub tego który silnik jest aktualnie używany w projekcie do którego chcemy dołączyć.&lt;/p&gt;
&lt;h2&gt;Na początku zainstalujmy niezbędny pakiet.&lt;/h2&gt;
&lt;p&gt;Nasz &lt;strong&gt;template rendering&lt;/strong&gt; zaimplementujemy do przykładu który stworzyliśmy w poprzednim poście: &lt;a href=&quot;https://kamilmichna.github.io/2019/1/koa4&quot;&gt;Link&lt;/a&gt;. Musimy doinstalować tam dwie niezbędne paczki. Pierwszą z nich będzie &lt;strong&gt;koa_views&lt;/strong&gt;, która pozwala nam na implementację &lt;strong&gt;template_renderingu&lt;/strong&gt;, a drugą będzie już paczka adekwatna do języka w którym będziemy pisać nasze szablony, ja wybrałem &lt;strong&gt;pug&lt;/strong&gt;.
Zainstalujmy więc paczkę &lt;strong&gt;koa_views&lt;/strong&gt;: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install koa-views &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A teraz paczkę &lt;strong&gt;pug&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install pug&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Teraz zmieńmy trochę nasz plik &lt;strong&gt;main.js&lt;/strong&gt; z poprzedniego poradnika&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//main.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;koa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//2&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    map&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        extension&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pug&apos;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na początku zajmijmy się punktem &lt;strong&gt;numer 1&lt;/strong&gt;. &lt;code class=&quot;language-text&quot;&gt;const views = require(&amp;#39;koa-views&amp;#39;);&lt;/code&gt; po prostu przypisuje nam do stałej views wcześniej zaimportowaną paczkę &lt;strong&gt;koa-views&lt;/strong&gt;, co pozwoli nam w prosty sposób jej użyć. Ciekawiej natomiast robi się przy bloku kodu oznaczonym komentarzem &lt;strong&gt;2&lt;/strong&gt;, rozłózmy go więc na czynniki pierwsze.&lt;/p&gt;
&lt;p&gt;Składnia &lt;strong&gt;app.use&lt;/strong&gt; przywodzi nam (i słusznie) znane już z poprzednich poradników &lt;strong&gt;middleware&lt;/strong&gt;, tym razem nie służy nam ono do routingu aplikacji a właśnie do konfiguracji renderowania naszych templatek. Wiem że brzmi to trochę skomplikowanie, przyjrzyjmy mu się więc z bliska. Argumentem funkcji &lt;strong&gt;app.use&lt;/strong&gt; jest &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    map&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        extension&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pug&apos;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fragment &lt;code class=&quot;language-text&quot;&gt;__dirname + &amp;#39;/views&amp;#39;&lt;/code&gt; mówi nam, że nasze templatki powinny znajdować się w folderze &lt;strong&gt;views&lt;/strong&gt; w tym katalogu co nasz plik &lt;strong&gt;main.js&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Obiekt &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    map: {
        extension: &amp;#39;pug&amp;#39; 
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;i jego właściwość &lt;strong&gt;extension&lt;/strong&gt; mówi nam o tym, jakiego template engine użyjemy. Jak już wspomniałem, u mnie jest to &lt;strong&gt;pug&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Następnie stwórzymy wspomniany wcześniej folder &lt;strong&gt;views&lt;/strong&gt;, a w nim plik site.pug.
Nie będę w tym poradniku omawiał składni poszczególnych &lt;strong&gt;template languages&lt;/strong&gt;, umieszczę jedynie tekst naszego pliku site.pug&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;pug&quot;&gt;&lt;pre class=&quot;language-pug&quot;&gt;&lt;code class=&quot;language-pug&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//site.pug&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;html&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;title&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token code&quot;&gt;content&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak widać, struktura jest dosyć podobna do &lt;strong&gt;czystego html&lt;/strong&gt;, zaobserwować można tutaj również &lt;strong&gt;zmienne&lt;/strong&gt; title oraz &lt;strong&gt;content&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Przekazywanie danych i renderowanie.&lt;/h2&gt;
&lt;p&gt;Jako że chcemy aby nasza strona w zależności od ścieżki miała różną treść, definicje poszczególnych renderów naszej aplikacji zdefiniujemy w pliku &lt;strong&gt;router.js&lt;/strong&gt; - tym samym który grał główne skrzypce w naszym poprzednim wpisie.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//router.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-views&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


router
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;site.pug&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello Page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Witaj na podstronie /hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;site.pug&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello Page&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Witaj na podstronie /&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;po pierwsze, na samej górze dodaliśmy podobnie jak w &lt;strong&gt;main.js&lt;/strong&gt; kolejny import - czyli nasze &lt;strong&gt;koa-views&lt;/strong&gt;. Pozwoli nam to użyć tutaj &lt;strong&gt;ctx.render&lt;/strong&gt; które pozwala wyrenderować nasz plik w &lt;strong&gt;template language&lt;/strong&gt;. Jako argument funkcji &lt;strong&gt;ctx.render&lt;/strong&gt; podajemy nazwę pliku wraz z rozszerzeniem - w tym przypadku &lt;strong&gt;pug&lt;/strong&gt;, a następnie obiekt w którym definiujemy nasze zmienne. Po ponownym odpaleniu naszego serwera w koa pod odpowiednimi adresami w przeglądarce powinniśmy ujrzeć nasze &lt;strong&gt;templatki&lt;/strong&gt; uzupełnione o podane przez nas dane.&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę! ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #4 Routing w oddzielnym pliku]]></title><description><![CDATA[Jak stworzyć routing w oddzielnym pliku?.Mimo iż stworzenie routingu tak jak zrobiliśmy to w tutorialu nr 2 jest bardzo proste i intuicyjne…]]></description><link>https://kamilmichna.github.io//2019/1/koa4/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/1/koa4/</guid><pubDate>Wed, 23 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Jak stworzyć routing w oddzielnym pliku?.&lt;/h1&gt;
&lt;p&gt;Mimo iż stworzenie routingu tak jak zrobiliśmy to w tutorialu nr 2 jest bardzo proste i intuicyjne, warto przenieść routy naszej aplikacji do odzielnego pliku. Jak to zrobić? Zacznijmy od standardowego serwera w &lt;strong&gt;Koa&lt;/strong&gt;, pliki serwera umieśćmy w pliku &lt;strong&gt;main.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//plik main.js&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;koa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;



app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Teraz stwórzymy oddzielny plik. Nazwiemy go &lt;strong&gt;router.js&lt;/strong&gt;. Możesz umieścić go gdzie tylko chcesz w swoim projekcie, ja umieszczę go w tym samym folderze, obok pliku &lt;strong&gt;main.js&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Jak stworzyć routing?&lt;/h2&gt;
&lt;p&gt;Jak wiadomo, jedną z głównych różnic między &lt;strong&gt;Express&lt;/strong&gt; a &lt;strong&gt;Koa&lt;/strong&gt; jest to, że potrzebny nam middleware musimy doinstalować sobie sami. Zainstalujmy więc przy pomocy npm paczkę &lt;strong&gt;koa-router&lt;/strong&gt; która pozwoli nam na stworzenie routingu. Jeżeli zainstalowałeś już tą paczkę przy okazji czytania jednego z poprzednich poradników, pomiń ten krok, ja jednak przypomnę jak to zrobić: &lt;code class=&quot;language-text&quot;&gt;npm install --save koa-router&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Uzupełnianie pliku router.js&lt;/h2&gt;
&lt;p&gt;Na początku, podobnie jak w tutorialu nr 2, musimy zdefiniować sobie w pliku &lt;strong&gt;router.js&lt;/strong&gt; nasze podstawowe routy.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//plik router.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


router
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HELLO WORLD!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;THIS IS MAIN PAGE&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na początku definiujemy sobie stałe Router, czyli klasę potrzebną do stworzenia routingu, oraz router, czyli jej instancję którą będziemy używać przy obsłudze naszych zapytań. Używając składni &lt;strong&gt;module.exports&lt;/strong&gt;, czyli składni modułów &lt;strong&gt;CJS&lt;/strong&gt; eksportujemy nasze routy i umożliwiamy ich zaimportowanie w pliku &lt;strong&gt;main.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//plik main.js&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;koa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Teraz pora wejść na adres localhost:3000 i przetestować nasze routy. Pierwszy zdefiniowany przez nas to &lt;code class=&quot;language-text&quot;&gt;/hello&lt;/code&gt;, gdy wejdziemy pod adres &lt;code class=&quot;language-text&quot;&gt;localhost:3000/hello&lt;/code&gt; naszym oczom ukaże się treść &lt;strong&gt;HELLO WORLD&lt;/strong&gt;, a gdy pod adres &lt;code class=&quot;language-text&quot;&gt;localhost:3000/&lt;/code&gt; naszym oczom ukaże się zdefiniowane w routes &lt;strong&gt;THIS IS MAIN PAGE&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Myślę że przeniesienie routingu naszego prostego serwera, szczególnie osobom dopiero zaczynającym przygodę z Koa pozwoli lepiej uporządkować strukturę swojej aplikacji. W następnym poście zaczniemy wykorzystywać możliwości template engines.&lt;/h2&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #3: Wstęp do template engines]]></title><description><![CDATA[Template engines w koa.js.Co to template engine-y?W pewnym momencie odczujemy potrzebę pobrania pewnych danych na przykład z serwera, a…]]></description><link>https://kamilmichna.github.io//2019/1/koa3/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/1/koa3/</guid><pubDate>Tue, 22 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Template engines w koa.js.&lt;/h1&gt;
&lt;h2&gt;Co to template engine-y?&lt;/h2&gt;
&lt;p&gt;W pewnym momencie odczujemy potrzebę pobrania pewnych danych na przykład z serwera, a następnie przekazanie go do route naszego serwera w &lt;strong&gt;koa&lt;/strong&gt;. W jaki sposób możemy to osiągnąć? Sposoby są co najmniej dwa. Jeden z nich, szczególnie przydatny przy szybko zmieniającej się treści strony jak na przykład przy projekcie który zawiera chat to strona która za pośrednictwem &lt;strong&gt;Javascriptu&lt;/strong&gt; łączy się z interfejsem serwera i z niego dynamicznie pobiera dane. Wspominałem już o &lt;strong&gt;Rest API&lt;/strong&gt;, i to jest właśnie jedno z jego głównych zastosowań. Dynamiczne pobieranie tresci z serwera jest co prawda bardzo przydatne, ale nie zawsze potrzebne. Na przykład w przypadku prostego bloga takiego jak ten (mimo że ten właśnie oparty jest o tzw &lt;strong&gt;static site generator&lt;/strong&gt;, będzie o tym inny wpis) nie potrzebujemy stałego połączenia z naszym backendem, wystarczy przecież pobranie listy postów i wyświetlenie jej gdy przeglądarka pobiera stronę główną. Do takich zastosowań warto użyć właśnie &lt;strong&gt;template engines&lt;/strong&gt;, o których jest ten post.&lt;/p&gt;
&lt;h2&gt;Jak działa template engine?&lt;/h2&gt;
&lt;p&gt;Zasada działania jest bardzo prosta. Jest to właściwie taki &lt;strong&gt;&quot;html na sterydach&quot;&lt;/strong&gt;. Co to oznacza? Nasze strony zapisujemy w jednym z odpowiednich języków, a serwer podczas zapytania przetwarza nasz szablon i zamienia na zwykły plik html.&lt;/p&gt;
&lt;h3&gt;Więc co jest w tym takiego super?&lt;/h3&gt;
&lt;p&gt;Główną zaletą używania &lt;strong&gt;template engines&lt;/strong&gt; jest możliwość użycia czegoś w rodzaju zmiennych - w odpowiednim miejscu w kodzie naszej strony mówimy na przykład &lt;strong&gt;&quot;Do tego nagłówka wstaw zmienną title&quot;&lt;/strong&gt; (której wartość pobierana jest przy przetwarzaniu szablonu) a nasz backend, w tym wypadku &lt;strong&gt;serwer w koa&lt;/strong&gt; w puste miejsce wstawi żądaną wartość.
Mimo iż brzmi to nieco enigmatycznie, niebawem powinno się rozjaśnić.&lt;/p&gt;
&lt;h3&gt;Jaki template engine wybrać?&lt;/h3&gt;
&lt;p&gt;W świecie &lt;strong&gt;Jsa&lt;/strong&gt; istnieje zatrzęsienie bibliotek, frameworków i różnych pomniejszych rozwiązań do wyboru. Podobnie jest w przypadku &lt;strong&gt;template engines&lt;/strong&gt; - mamy ich do wyboru całkiem sporo. Najpopularniejsze z nich to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pug&lt;/li&gt;
&lt;li&gt;Underscore&lt;/li&gt;
&lt;li&gt;EJS&lt;/li&gt;
&lt;li&gt;Handlebars&lt;/li&gt;
&lt;li&gt;Mustache&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Warto przy wyborze kierować się głównie naszym gustem - mają bardzo zblizone możliwości, a warto zadbać aby wybrać ten z którym będzie nam się przyjemnie pracować.&lt;/p&gt;
&lt;h4&gt;W następnym poście zaczniemy pracę z template engine.&lt;/h4&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #2.5: next]]></title><description><![CDATA[Next w koa().W poprzednim wpisie stworzyliśmy sobie prosty routing w koa, dzisiaj natomiast w niemal telegraficznym skrócie przyjrzymy się…]]></description><link>https://kamilmichna.github.io//2019/1/koanext/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/1/koanext/</guid><pubDate>Mon, 21 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Next w koa().&lt;/h1&gt;
&lt;p&gt;W poprzednim wpisie stworzyliśmy sobie prosty routing w koa, dzisiaj natomiast w niemal &lt;strong&gt;telegraficznym&lt;/strong&gt; skrócie przyjrzymy się metodzie &lt;strong&gt;next()&lt;/strong&gt; którą udostępnia nam &lt;strong&gt;koa&lt;/strong&gt; oraz jego &quot;starszy brat&quot; czyli &lt;strong&gt;Express&lt;/strong&gt;. &lt;/p&gt;
&lt;h2&gt;Jak działa next?&lt;/h2&gt;
&lt;p&gt;Jeżeli w danym routcie wywołamy metodę &lt;strong&gt;next()&lt;/strong&gt;, zostanie natychmiastowo wykonany kolejna metoda przypisana do routa, który spełnia wymogi określone w nim samym. Wiem brzmi to bardzo skomplikowanie - warto jednak zobaczyć jego działanie w praktyce, a stanie się to o wiele prostsze. Skopiujmy zatem kod który napisaliśmy w ostatnim poście:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

   app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allowedMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;this is index page&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    
    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;usunęliśmy jednak route dla &lt;code class=&quot;language-text&quot;&gt;/hello&lt;/code&gt; - nie będzie nam potrzebny.&lt;/p&gt;
&lt;h2&gt;Co chcemy zrobić?&lt;/h2&gt;
&lt;p&gt;Stworzymy sobie prosty skrypt, który pozwoli nam pobrać parametr z &lt;strong&gt;url&lt;/strong&gt; i w zależności od jego długośći wyświetlić odpowiedni komunikat. Dla przykładu, jeżeli ciąg znaków będzie dłuższy niż 10, serwer &lt;strong&gt;koa&lt;/strong&gt; zwróci komunikat &quot;długi string&quot; natomiast jeżeli będzie krótszy, zwróci &quot;krótki string&quot;;&lt;/p&gt;
&lt;h3&gt;Do dzieła!&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allowedMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/:int&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jeżeli teraz przejdziesz pod `localhost:3000/123456&apos; w konsoli twojego serwera powinna ukazać się liczba - a właściwie napis &lt;strong&gt;123456&lt;/strong&gt;. Oznacza to że pobraliśmy z url strony właśnie potrzebny nam string. Teraz sprawdźmy czy jest on większy czy mniejszy:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allowedMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/:int&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mniejszy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/:int&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;większy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Gotowe&lt;/strong&gt;. Teraz jeżeli po &lt;strong&gt;localhost:3000/&lt;/strong&gt; wpiszesz dowolny ciąg znaków nasz skrypt sprawdzi czy jest on dłuższy niż 10, jeżeli tak wyświetli odpowiedni komunikat.&lt;/p&gt;
&lt;h2&gt;Okej ale jak to działa?&lt;/h2&gt;
&lt;h3&gt;Weźmy pod lupę pierwszego routa:&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/:int&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mniejszy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;na początku mamy prostą konstrukcję &lt;strong&gt;if else&lt;/strong&gt; która zwyczajnie sprawdza nam czy ciąg jest dluższy czy krótszy niż 10 znaków. Jeżeli długość ciągu jest mniejsza lub równa wymienionej wcześniej liczbie, serwer od razu zwraca &quot;mniejszy&quot;, jeżeli natomiast jest większy wywoła &lt;strong&gt;next()&lt;/strong&gt; - i tutaj zaczyna się cała magia.&lt;/p&gt;
&lt;h3&gt;Jak właściwie działa next()?&lt;/h3&gt;
&lt;p&gt;Wywołanie next() przeniesie nas od razu do kolejnego routa którego warunki spełnia nasz aktualny url - w tym przypadku:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/:int&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;większy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oznacza to ze w przypadku gdy ciąg znaków jest dłuższy niż 10 pierwszy route przeniesie nas za pomocą &lt;strong&gt;next&lt;/strong&gt; do drugiego routa. Może ten przykład nie jest zbyt praktyczny - &lt;strong&gt;next&lt;/strong&gt; może mieć w końcu z goła inne zastosowanie - jednak myślę że może pomóc zrozumieć jego działanie.&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #2: routing]]></title><description><![CDATA[Routing w Koa.Dzisiaj zajmiemy się czymś bardzo ważnym dla praktycznie każdej aplikacji internetowej - routingiem. Zanim jednak przejdziemy…]]></description><link>https://kamilmichna.github.io//2019/1/koa2/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/1/koa2/</guid><pubDate>Sun, 20 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Routing w Koa.&lt;/h1&gt;
&lt;p&gt;Dzisiaj zajmiemy się czymś bardzo ważnym dla praktycznie każdej aplikacji internetowej - &lt;strong&gt;routingiem&lt;/strong&gt;. Zanim jednak przejdziemy do kodu, musimy ustalić, czym właściwie ten routing jest.&lt;/p&gt;
&lt;h2&gt;Czym jest Routing?&lt;/h2&gt;
&lt;p&gt;Dzięki &lt;strong&gt;routingowi&lt;/strong&gt; możemy w prosty sposób ustalić jak nasza aplikacja reagować będzie na zapytania do niej kierowane - jednym słowem możemy ściśle ustalić sposób zachowania naszej aplikacji w zależności od typu zapytania, oraz ścieżki wskazanej przez zapytanie. Pozwala nam to w znacznie prostszy sposób komunikować się z frontem aplikacji - chociażby poprzez &lt;strong&gt;REST API&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Routing w Koa - jak zacząć?&lt;/h2&gt;
&lt;p&gt;Budowa &lt;strong&gt;Koa&lt;/strong&gt; trochę różni się od budowy innego frameworka - &lt;strong&gt;Express.js&lt;/strong&gt;. W &lt;strong&gt;Expressie&lt;/strong&gt; na starcie mieliśmy moduł pozwalający na obsługę routingu, natomiast w &lt;strong&gt;Koa&lt;/strong&gt; musimy sami go doinstalować. Potrzebny moduł nosi nazwę &lt;strong&gt;koa-router&lt;/strong&gt; i podobnie jak w przypadku &lt;strong&gt;koa&lt;/strong&gt; doinstalujemy go za pomocą polecenia
&lt;code class=&quot;language-text&quot;&gt;npm i koa-router&lt;/code&gt; (instalujemy oczywiście w folderze z zainstalowanym koa)&lt;/p&gt;
&lt;h2&gt;Używamy routera&lt;/h2&gt;
&lt;p&gt;Zaczynamy z kodem z poprzedniego wpisu: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;aby skorzystać z &lt;strong&gt;routera&lt;/strong&gt;, musimy &quot;pobrać&quot; go do naszej aplikacji, przypiszemy go do stałej &lt;strong&gt;Router&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Następnie wprowadzimy kilka istotnych zmian w kodzie:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

   app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allowedMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;this is index page&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po pierwsze, podobnie jak w przypadku &lt;strong&gt;app&lt;/strong&gt; tworzymy stałą router, która staje się instancją klasy &lt;strong&gt;Router&lt;/strong&gt;. Brzmi to skomplikowanie, ale można to sobie bardzo prosto wyobrazić - z &quot;foremki&quot; jaką jest &lt;strong&gt;Router&lt;/strong&gt; powstaje &lt;strong&gt;router&lt;/strong&gt;, czyli jego mała , fizyczna instacja skrojona idealnie na potrzeby naszej aplikacji:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;     &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Następnie dwukrotnie korzystamy ze składni &lt;strong&gt;app.use&lt;/strong&gt;:
&lt;code class=&quot;language-text&quot;&gt;app.use(router.routes())&lt;/code&gt; - tutaj mówimy naszej aplikacji aby przy użyciu funkcji &lt;strong&gt;routes&lt;/strong&gt; pobrała od naszego routera wszystkie potrzebne informacje i użyła ich w razie jakiegokolwiek zapytania. To właśnie ta funkcja łączy nasz router (czyli tzw middleware) z aplikacją&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;app.use(router.allowedMethods()))&lt;/code&gt; - ta linia nie jest niezbędna do podstawowego działania, ale pozwala na obsługę zapytania OPTIONS - warto więc ją dodać, nawet jeżeli nie do końca wiemy jeszcze do czego dokładnie służy&lt;/p&gt;
&lt;h2&gt;Zabawa routingiem&lt;/h2&gt;
&lt;p&gt;Po wstępnej konfiguracji przyszedł czas na właściwie zastosowanie routera:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;this is index page&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po wejściu w przeglądarce pod adres &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; naszym oczom powinno ukazać się &quot;this is index page&quot;. Nic w tym jednak niezwykłego - podobny efekt moglibyśmy osiągnąć używając kodu z poprzedniej częśći, podmieniając jedynie &apos;hello&apos; na wybrany przez nas tekst. &lt;/p&gt;
&lt;h2&gt;Więcej routingu&lt;/h2&gt;
&lt;p&gt;Dodajmy sobie do naszego skryptu jeszcze jeden route: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

   app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;allowedMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;this is index page&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

     router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;this is hello page&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Teraz po wejściu na &lt;a href=&quot;http://localhost:3000/hello&quot;&gt;http://localhost:3000/hello&lt;/a&gt; nasz serwer wykryje odpowiednią ścieżkę i zamiast &quot;this is index page&quot; zwróci &quot;this is hello page&quot;&lt;/p&gt;
&lt;h2&gt;Fajne, ale jak to działa?&lt;/h2&gt;
&lt;p&gt;Rozłóżmy sobie routing na części pierwsze. Jako przykładem posłużymy się tym routem:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;      router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;this is hello page&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;router.get&lt;/code&gt; informuje dany route aby regował na zapytanie o danej metodzie - w tym przypadku &lt;strong&gt;get&lt;/strong&gt;. Oprócz &lt;strong&gt;get&lt;/strong&gt; możemy użyć także innych słów kluczowych, odpowiadających metodom zapytań &lt;strong&gt;http&lt;/strong&gt; używanych do stworzenia &lt;strong&gt;REST API&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;post (odpowiada za obsługę zapytania &lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;put  (odpowiada za obsługę zapytania &lt;code class=&quot;language-text&quot;&gt;put&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;del (odpowiada za obsługę zapytania &lt;code class=&quot;language-text&quot;&gt;delete&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;all (obsługuje wszystkie powyższe typy zapytań )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pierwszym parametrem funkcji jest &lt;strong&gt;relatywna ścieżka naszego zapytania&lt;/strong&gt;. Przykładowo &lt;code class=&quot;language-text&quot;&gt;/hello&lt;/code&gt; w naszej aplikacji nasłuchuje zapytań tylko pod adresem &lt;a href=&quot;http://localhost:3000/hello&quot;&gt;http://localhost:3000/hello&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Następny parametr to funkcja, opisująca zachowanie naszego routa: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;this is hello page&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Korzystamy tutaj z tzw &lt;strong&gt;arrow function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O parametrze &lt;strong&gt;next&lt;/strong&gt; opowiem w innym wpisie, natomiast ctx to  &lt;strong&gt;kontekst&lt;/strong&gt;, czyli obiekt który zawiera w sobie znane z Expressa &lt;strong&gt;res&lt;/strong&gt; i &lt;strong&gt;req&lt;/strong&gt; - obiekty zapytań. Tutaj można dowiedzieć się o nim więcej: &lt;a href=&quot;https://github.com/koajs/koa/blob/master/docs/api/context.md&quot;&gt;https://github.com/koajs/koa/blob/master/docs/api/context.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ctx.body&lt;/strong&gt; (a dokładniej ctx.response.body) to treść która zostanie wysłana do klienta który wykonał zapytanie które spełnia warunki naszego routa.&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #1: Instalacja i Hello-World]]></title><description><![CDATA[Witaj w pierwszej części poradnika koa.Zanim przystąpimy do używania frameworka musimy go zainstalowaćInstalacja potrzebnych pakietówKoa do…]]></description><link>https://kamilmichna.github.io//2019/1/koa1/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/1/koa1/</guid><pubDate>Sat, 19 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Witaj w pierwszej części poradnika koa.&lt;/h1&gt;
&lt;p&gt;Zanim przystąpimy do używania frameworka musimy go zainstalować&lt;/p&gt;
&lt;h2&gt;Instalacja potrzebnych pakietów&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Koa&lt;/strong&gt; do działania potrzebuje node.js, natomiast do poprawnej i prostej instalacji frameworka potrzebujemy Node Package Managera, czyli &lt;strong&gt;npm&lt;/strong&gt;. Sprawdzmy więc,czy je posiadamy&lt;/p&gt;
&lt;h3&gt;Sprawdzenie wersji node&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    node -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jeżeli posiadasz poprawnie zainstalowane środowisko &lt;strong&gt;node.js&lt;/strong&gt;, komenda powinna zwrócić wersję node, w moim przypadku: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    v10.6.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Następnym krokiem jest sprawdzenie, czy posiadamy &lt;strong&gt;npm&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    npm -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;W moim przypadku komenda ta zwraca:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;   6.3.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oznacza to że zarówno &lt;strong&gt;node&lt;/strong&gt; i &lt;strong&gt;npm&lt;/strong&gt; jest poprawnie zainstalowane i gotowe do użycia&lt;/p&gt;
&lt;h3&gt;Stworzenie środowiska dla koa&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Krok pierwszy:&lt;/strong&gt; stwórz nowy folder dla aplikacji z użyciem koa (pamiętaj aby nie nazywał sie po prostu koa - nie mozna zainstalować modułu w folderze o tej samej nazwie)
&lt;strong&gt;Krok drugi:&lt;/strong&gt; otwórz ten folder w terminalu, wierszu poleceń lub PowerShell  (w przypadku windows)
Następnie należy użyć polecenia &lt;code class=&quot;language-text&quot;&gt;npm init&lt;/code&gt; które stworzy w folderze plik &lt;strong&gt;package.json&lt;/strong&gt; oraz pozwoli na instalację modułów npm (czyli naszego &lt;strong&gt;koa&lt;/strong&gt;). Wypełnienie wszystkich informacji nie jest konieczne.&lt;/p&gt;
&lt;h3&gt;Instalacja Koa&lt;/h3&gt;
&lt;p&gt;Jeżeli wszystkie poprzednie kroki zostały spełnione, polecenie &lt;code class=&quot;language-text&quot;&gt;npm i koa&lt;/code&gt; zainstaluje &lt;strong&gt;framework koa&lt;/strong&gt; w naszym folderze.&lt;/p&gt;
&lt;h2&gt;Pierwsza aplikacja&lt;/h2&gt;
&lt;p&gt;W naszym folderze tworzymy plik javascript o dowolnej nazwie, ja nazwę go &lt;strong&gt;start.js&lt;/strong&gt;. Następnie wklejamy do niego kod:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aby uruchomić teraz nasz skrypt, używamy polecenia: &lt;code class=&quot;language-text&quot;&gt;node start.js&lt;/code&gt;
Następnie wejdź w przeglądarce pod adres &lt;strong&gt;&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;&lt;/strong&gt;, nasz skrypt wyświetla &lt;strong&gt;Hello Wordl&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;No okej, ale jak to działa? Przejrzyjmy kod linia po linii&lt;/h3&gt;
&lt;p&gt;Aby móc użyć koa w naszym pliku, importujemy go za pomocą require i przypisujemy do stałej  &lt;strong&gt;Koa&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Koa &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;koa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Następnie tworzymy instancję klasy &lt;strong&gt;Koa&lt;/strong&gt;, i przypisujemy do kolejnej stałej, tym razem &lt;strong&gt;app&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Koa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Następna część jest odrobine bardziej skomplikowana:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;app.use()&lt;/strong&gt; dodaje do aplikacji funkcję podaną jako argument, dzięki temu możemy chociażby wysyłać czy pobierać pliki na serwerze, dokładniej omówimy to jednak w następnej części poradnika. Bardziej interesująca dla nas jest natomias funkcja znajdująca się wewnątrz - wyciągnijmy ją więc z &lt;strong&gt;app.use&lt;/strong&gt; i omówmy:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jest to tak zwana &lt;strong&gt;funkcja strzałkowa&lt;/strong&gt; - jeżeli jest ci obca to odsyłam do MDN: &lt;a href=&quot;https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Functions/Funkcje_strzalkowe&quot;&gt;link&lt;/a&gt;. Widzimy tutaj również &lt;strong&gt;async&lt;/strong&gt; - jak wspomniałem koa w dużej mierze wykorzystuje asynchroniczność oraz składnię &lt;strong&gt;async/await&lt;/strong&gt; jednak w tym przykładzie nie ma to żadnego znaczenia.&lt;/p&gt;
&lt;p&gt;Jako parametr przyjmuje argument &lt;strong&gt;ctx&lt;/strong&gt;. Jest to skrót od &lt;strong&gt;context&lt;/strong&gt;, oraz zawiera w sobie zarówno &lt;strong&gt;req&lt;/strong&gt; jak i &lt;strong&gt;res&lt;/strong&gt; (request i response) znane z node.
Oznacza to że zarówno przy pobieraniu danych z zapytania jak i wysyłaniu naszych do użytkownika będziemy korzystać właśnie z &lt;strong&gt;ctx&lt;/strong&gt;. Przy wysłaniu odpowiedzi musimy skorzystać z obiektu ctx.response, czyli obiektu który zawiera ogół informacji o odpowiedzi z serwera. W tym przykładzie interesuje nas konkretnie &lt;strong&gt;body&lt;/strong&gt;, do którego można dostać się zarówno poprzez &lt;code class=&quot;language-text&quot;&gt;ctx.body&lt;/code&gt; jak i &lt;code class=&quot;language-text&quot;&gt;ctx.response.body&lt;/code&gt;. Jeżeli mi nie wierzysz - po prostu podmień odpowiednie fragmenty i sprawdz czy kod nadal działa (gwarantuję że tak).&lt;/p&gt;
&lt;p&gt;Ostatnia część pliku to &lt;code class=&quot;language-text&quot;&gt;app.listen(3000);&lt;/code&gt;. Mówi on aplikacji, aby nasłuchiwała pod adresem &lt;a href=&quot;http://localhost:port/&quot;&gt;http://localhost:port/&lt;/a&gt;, gdzie &lt;strong&gt;port&lt;/strong&gt; podajemy właśnie wewnątrz funkcji listen.&lt;/p&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[Poradnik Koa #0: Czym jest Koa?]]></title><description><![CDATA[Wstęp.Obserwując bardzo małą ilość poradników dotyczących używania frameworka Koa, zwłaszcza w języku polskim postanowiłem napisać…]]></description><link>https://kamilmichna.github.io//2019/1/koa0/</link><guid isPermaLink="false">https://kamilmichna.github.io//2019/1/koa0/</guid><pubDate>Fri, 18 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Wstęp.&lt;/h1&gt;
&lt;p&gt;Obserwując bardzo małą ilość poradników dotyczących używania frameworka Koa, zwłaszcza w języku polskim postanowiłem napisać przewodnik który wytłumaczy podstawy Koa, oraz ułatwi start osobom które nigdy z niego nie korzystały.&lt;/p&gt;
&lt;h2&gt;Czym właściwie jest Koa?&lt;/h2&gt;
&lt;p&gt;Koa to &lt;strong&gt;framework webowy&lt;/strong&gt; dla &lt;strong&gt;Node&lt;/strong&gt; stworzony przez zespół odpowiedzialny za chyba najpopularniejsze obecnie rozwiązanie tego typu: &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;, można więc uznać że Koa to jego młodszy brat :). Głównymi cechami odróżniającymi &lt;strong&gt;Koa&lt;/strong&gt; od &lt;strong&gt;Expressa&lt;/strong&gt; jest jego &lt;strong&gt;asynchroniczność&lt;/strong&gt; oraz to, że &lt;strong&gt;Koa&lt;/strong&gt; dostajemy bez middleware&apos;u - musimy sami doinstalować sobie tylko to, co jest nam potrzebne.&lt;/p&gt;
&lt;h4&gt;Link do koa: &lt;a href=&quot;https://koajs.com/&quot;&gt;Koa.js&lt;/a&gt;&lt;/h4&gt;
&lt;h3&gt;Dzięki za uwagę, Kamil Michna ;)&lt;/h3&gt;</content:encoded></item></channel></rss>