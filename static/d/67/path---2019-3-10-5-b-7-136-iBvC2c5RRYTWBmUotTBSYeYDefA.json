{"data":{"markdownRemark":{"html":"<h1>Podstawowe REST Api</h1>\n<p>Dzisiejszy tytuł jest nieco zwodniczy - co prawda nie będziemy korzystać z KOA, ale nauczymy się jak odpytać Api o dane, co przyda nam się w następnych postach.</p>\n<h2>Czym jest REST Api?</h2>\n<p>REST Api, to w dużym skrócie taki interfejs w napisanym przez nas oprogramowaniu, który pozwala pobierać innym aplikacjom kluczowe do ich działania dane.</p>\n<h2>Po co mi REST Api skoro umiem przekazywać dane do strony w Koa?</h2>\n<p>Przewagi REST Api nad powyższym rozwiązaniem są dwie - chociaż oba rozwiązania są dobre, REST Api pozwala nam po pierwsze pobierać dane bez potrzeby przeładowywania naszej strony, a po drugie na korzystanie z naszych danych przez wiele aplikacji. Może teraz wydaje się to dla Ciebie lekko abstrakcyjne - w końcu interesuje nas napisanie funkcjonalnego serwera w <strong>Koa</strong>, a nie <strong>kilku</strong> aplikacji, i to jeszcze zapewne w różnych językach, ale wyobraź sobie taki przykład: razem z zespołem programistów zakładacie startup - nowy, rewolucyjny portal społecznościowy. Odpowiadasz w nim właśnie za <strong>backend</strong>, czyli serwer w <strong>koa</strong> oraz bazę danych zawierającą na przykład informacje o użytkownikach - ich imiona, nazwiska, maile, wpisy. Sposób który już znamy - przekazywanie informacji do pliku przy renderowaniu sprawdził by się - serwer pobierze dane o użytkowniku, a następnie wyrenderuje template strony uzupełniając go odpowiednimi informacjami. Problem zaczyna się jednak, gdy oprócz aplikacji webowej, osoby w twoim zespole piszą także aplikacje na przykład na <strong>Androida w języku JAVA, aplikację na Ios w języku Swift, oraz aplikację natywną na system Windows w języku C#</strong>. W jaki sposób mają oni uzyskać dane? Właśnie przez REST Api, które <strong>Ty</strong> stworzysz. Aby nie narobić bałaganu, także klient przeglądarkowy - czyli strona powinna pobierać dane właśnie z Api, a nie poprzez dane przekazywane przy renderowaniu.</p>\n<h2>Do dzieła!</h2>\n<p>Stwórzymy sobie prostą stronę <strong>.html</strong> w dowolnym wybranym przez ciebie miejscu na dysku. Większość naszych zapytań będzie się opierać na <strong>javascriptcie</strong>, więc po prostu wklejmy do naszego pliku taki kod:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Działa!\"</span><span class=\"token punctuation\">)</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>a następnie otwórz w przeglądarce. Jeśli wyświetli ona komunikat o treści <strong>Działa!</strong> to wszystko idzie po naszej myśli.</p>\n<h2>Zapytanie do api.</h2>\n<p>Wykorzystajmy, w ramach testu darmowe api dostępne w internecie. Zawiera ono podobnie jak nasz przykład, listę użytkowników, wraz z danymi o nich. Aby odpytać nasze REST Api, użyjemy <strong>fetch Api</strong> w javascript. Kod który będę teraz pisał, musi znajdować się w tagu <strong>script</strong>, tam gdzie nasz alert (który możesz już usunąć).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url <span class=\"token keyword\">do</span> naszego api<span class=\"token punctuation\">)</span></code></pre></div>\n<p>jako url użyjemy <code class=\"language-text\">https://jsonplaceholder.typicode.com/users</code>, ponieważ właśnie spod tego adresu mozemy pobrać dane o naszych użytkownikach. Zwróci nam to obiekt <strong>Promise</strong>, a więc następnie użyjemy <strong>then</strong>, gdzie wykorzystamy specjalną funkcję która przekonwertuje dane w formacie <strong>JSON</strong> (najczęściej taki format wykorzystuje sie przy komunikacji z serwerem) na znany nam obiekt w javascript.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://jsonplaceholder.typicode.com/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resp <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resp <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Powyższy kod wyświetli obiekt zawierający dane użytkowników.</p>","frontmatter":{"date":"March 10, 2019","path":"/2019/3/10","title":"Poradnik Koa #8.1 - podstawowe REST Api"}}},"pageContext":{}}