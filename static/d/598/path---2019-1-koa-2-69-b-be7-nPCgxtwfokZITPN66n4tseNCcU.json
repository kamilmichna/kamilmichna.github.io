{"data":{"markdownRemark":{"html":"<h1>Routing w Koa.</h1>\n<p>Dzisiaj zajmiemy się czymś bardzo ważnym dla praktycznie każdej aplikacji internetowej - <strong>routingiem</strong>. Zanim jednak przejdziemy do kodu, musimy ustalić, czym właściwie ten routing jest.</p>\n<h2>Czym jest Routing?</h2>\n<p>Dzięki <strong>routingowi</strong> możemy w prosty sposób ustalić jak nasza aplikacja reagować będzie na zapytania do niej kierowane - jednym słowem możemy ściśle ustalić sposób zachowania naszej aplikacji w zależności od typu zapytania, oraz ścieżki wskazanej przez zapytanie. Pozwala nam to w znacznie prostszy sposób komunikować się z frontem aplikacji - chociażby poprzez <strong>REST API</strong>.</p>\n<h2>Routing w Koa - jak zacząć?</h2>\n<p>Budowa <strong>Koa</strong> trochę różni się od budowy innego frameworka - <strong>Express.js</strong>. W <strong>Expressie</strong> na starcie mieliśmy moduł pozwalający na obsługę routingu, natomiast w <strong>Koa</strong> musimy sami go doinstalować. Potrzebny moduł nosi nazwę <strong>koa-router</strong> i podobnie jak w przypadku <strong>koa</strong> doinstalujemy go za pomocą polecenia\n<code class=\"language-text\">npm i koa-router</code> (instalujemy oczywiście w folderze z zainstalowanym koa)</p>\n<h2>Używamy routera</h2>\n<p>Zaczynamy z kodem z poprzedniego wpisu: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>aby skorzystać z <strong>routera</strong>, musimy \"pobrać\" go do naszej aplikacji, przypiszemy go do stałej <strong>Router</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n         ctx<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Następnie wprowadzimy kilka istotnych zmian w kodzie:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'this is index page'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Po pierwsze, podobnie jak w przypadku <strong>app</strong> tworzymy stałą router, która staje się instancją klasy <strong>Router</strong>. Brzmi to skomplikowanie, ale można to sobie bardzo prosto wyobrazić - z \"foremki\" jaką jest <strong>Router</strong> powstaje <strong>router</strong>, czyli jego mała , fizyczna instacja skrojona idealnie na potrzeby naszej aplikacji:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">     <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Następnie dwukrotnie korzystamy ze składni <strong>app.use</strong>:\n<code class=\"language-text\">app.use(router.routes())</code> - tutaj mówimy naszej aplikacji aby przy użyciu funkcji <strong>routes</strong> pobrała od naszego routera wszystkie potrzebne informacje i użyła ich w razie jakiegokolwiek zapytania. To właśnie ta funkcja łączy nasz router (czyli tzw middleware) z aplikacją</p>\n<p><code class=\"language-text\">app.use(router.allowedMethods()))</code> - ta linia nie jest niezbędna do podstawowego działania, ale pozwala na obsługę zapytania OPTIONS - warto więc ją dodać, nawet jeżeli nie do końca wiemy jeszcze do czego dokładnie służy</p>\n<h2>Zabawa routingiem</h2>\n<p>Po wstępnej konfiguracji przyszedł czas na właściwie zastosowanie routera:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'this is index page'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Po wejściu w przeglądarce pod adres <a href=\"http://localhost:3000/\">http://localhost:3000/</a> naszym oczom powinno ukazać się \"this is index page\". Nic w tym jednak niezwykłego - podobny efekt moglibyśmy osiągnąć używając kodu z poprzedniej częśći, podmieniając jedynie 'hello' na wybrany przez nas tekst. </p>\n<h2>Więcej routingu</h2>\n<p>Dodajmy sobie do naszego skryptu jeszcze jeden route: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'this is index page'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n     router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'this is hello page'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Teraz po wejściu na <a href=\"http://localhost:3000/hello\">http://localhost:3000/hello</a> nasz serwer wykryje odpowiednią ścieżkę i zamiast \"this is index page\" zwróci \"this is hello page\"</p>\n<h2>Fajne, ale jak to działa?</h2>\n<p>Rozłóżmy sobie routing na części pierwsze. Jako przykładem posłużymy się tym routem:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">      router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'this is hello page'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">router.get</code> informuje dany route aby regował na zapytanie o danej metodzie - w tym przypadku <strong>get</strong>. Oprócz <strong>get</strong> możemy użyć także innych słów kluczowych, odpowiadających metodom zapytań <strong>http</strong> używanych do stworzenia <strong>REST API</strong>:</p>\n<ul>\n<li>post (odpowiada za obsługę zapytania <code class=\"language-text\">post</code>)</li>\n<li>put  (odpowiada za obsługę zapytania <code class=\"language-text\">put</code>)</li>\n<li>del (odpowiada za obsługę zapytania <code class=\"language-text\">delete</code>)</li>\n<li>all (obsługuje wszystkie powyższe typy zapytań )</li>\n</ul>\n<p>Pierwszym parametrem funkcji jest <strong>relatywna ścieżka naszego zapytania</strong>. Przykładowo <code class=\"language-text\">/hello</code> w naszej aplikacji nasłuchuje zapytań tylko pod adresem <a href=\"http://localhost:3000/hello\">http://localhost:3000/hello</a></p>\n<p>Następny parametr to funkcja, opisująca zachowanie naszego routa: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'this is hello page'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Korzystamy tutaj z tzw <strong>arrow function</strong></p>\n<p>O parametrze <strong>next</strong> opowiem w innym wpisie, natomiast ctx to  <strong>kontekst</strong>, czyli obiekt który zawiera w sobie znane z Expressa <strong>res</strong> i <strong>req</strong> - obiekty zapytań. Tutaj można dowiedzieć się o nim więcej: <a href=\"https://github.com/koajs/koa/blob/master/docs/api/context.md\">https://github.com/koajs/koa/blob/master/docs/api/context.md</a>.</p>\n<p><strong>ctx.body</strong> (a dokładniej ctx.response.body) to treść która zostanie wysłana do klienta który wykonał zapytanie które spełnia warunki naszego routa.</p>\n<h3>Dzięki za uwagę ;)</h3>","frontmatter":{"date":"January 20, 2019","path":"/2019/1/koa2","title":"Poradnik Koa #2: routing"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}