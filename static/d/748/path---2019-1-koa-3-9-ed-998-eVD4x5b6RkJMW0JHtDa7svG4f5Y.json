{"data":{"markdownRemark":{"html":"<h1>Template engines w koa.js</h1>\n<h2>Co to template engine-y?</h2>\n<p>W pewnym momencie odczujemy potrzebę pobrania pewnych danych na przykład z serwera, a następnie przekazanie go do route naszego serwera w <strong>koa</strong>. W jaki sposób możemy to osiągnąć? Sposoby są co najmniej dwa. Jeden z nich, szczególnie przydatny przy szybko zmieniającej się treści strony jak na przykład przy projekcie który zawiera chat to strona która za pośrednictwem <strong>Javascriptu</strong> łączy się z interfejsem serwera i z niego dynamicznie pobiera dane. Wspominałem już o <strong>Rest API</strong>, i to jest właśnie jedno z jego głównych zastosowań. Dynamiczne pobieranie tresci z serwera jest co prawda bardzo przydatne, ale nie zawsze potrzebne. Na przykład w przypadku prostego bloga takiego jak ten (mimo że ten właśnie oparty jest o tzw <strong>static site generator</strong>, będzie o tym inny wpis) nie potrzebujemy stałego połączenia z naszym backendem, wystarczy przecież pobranie listy postów i wyświetlenie jej gdy przeglądarka pobiera stronę główną. Do takich zastosowań warto użyć właśnie <strong>template engines</strong>, o których jest ten post.</p>\n<h2>Jak działa template engine?</h2>\n<p>Zasada działania jest bardzo prosta. Jest to właściwie taki <strong>\"html na sterydach\"</strong>. Co to oznacza? Nasze strony zapisujemy w jednym z odpowiednich języków, a serwer podczas zapytania przetwarza nasz szablon i zamienia na zwykły plik html.</p>\n<h3>Więc co jest w tym takiego super?</h3>\n<p>Główną zaletą używania <strong>template engines</strong> jest możliwość użycia czegoś w rodzaju zmiennych - w odpowiednim miejscu w kodzie naszej strony mówimy na przykład <strong>\"Do tego nagłówka wstaw zmienną title\"</strong> (której wartość pobierana jest przy przetwarzaniu szablonu) a nasz backend, w tym wypadku <strong>serwer w koa</strong> w puste miejsce wstawi żądaną wartość.\nMimo iż brzmi to nieco enigmatycznie, niebawem powinno się rozjaśnić.</p>\n<h3>Jaki template engine wybrać?</h3>\n<p>W świecie <strong>Jsa</strong> istnieje zatrzęsienie bibliotek, frameworków i różnych pomniejszych rozwiązań do wyboru. Podobnie jest w przypadku <strong>template engines</strong> - mamy ich do wyboru całkiem sporo. Najpopularniejsze z nich to:</p>\n<ul>\n<li>Pug</li>\n<li>Underscore</li>\n<li>EJS</li>\n<li>Handlebars</li>\n<li>Mustache</li>\n</ul>\n<p>Warto przy wyborze kierować się głównie naszym gustem - mają bardzo zblizone możliwości, a warto zadbać aby wybrać ten z którym będzie nam się przyjemnie pracować.</p>\n<h4>W następnym poście zaczniemy pracę z template engine.</h4>\n<h3>Dzięki za uwagę ;)</h3>","frontmatter":{"date":"January 06, 2019","path":"/2019/1/koa3","title":"Poradnik Koa #3: Wstęp do template engines"}}},"pageContext":{}}