{"data":{"markdownRemark":{"html":"<h1>Witaj w pierwszej części poradnika koa.</h1>\n<p>Zanim przystąpimy do używania frameworka musimy go zainstalować</p>\n<h2>Instalacja potrzebnych pakietów</h2>\n<p><strong>Koa</strong> do działania potrzebuje node.js, natomiast do poprawnej i prostej instalacji frameworka potrzebujemy Node Package Managera, czyli <strong>npm</strong>. Sprawdzmy więc,czy je posiadamy</p>\n<h3>Sprawdzenie wersji node</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    node -v</code></pre></div>\n<p>Jeżeli posiadasz poprawnie zainstalowane środowisko <strong>node.js</strong>, komenda powinna zwrócić wersję node, w moim przypadku: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    v10.6.0</code></pre></div>\n<p>Następnym krokiem jest sprawdzenie, czy posiadamy <strong>npm</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    npm -v</code></pre></div>\n<p>W moim przypadku komenda ta zwraca:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   6.3.0</code></pre></div>\n<p>Oznacza to że zarówno <strong>node</strong> i <strong>npm</strong> jest poprawnie zainstalowane i gotowe do użycia</p>\n<h3>Stworzenie środowiska dla koa</h3>\n<p><strong>Krok pierwszy:</strong> stwórz nowy folder dla aplikacji z użyciem koa (pamiętaj aby nie nazywał sie po prostu koa - nie mozna zainstalować modułu w folderze o tej samej nazwie)\n<strong>Krok drugi:</strong> otwórz ten folder w terminalu, wierszu poleceń lub PowerShell  (w przypadku windows)\nNastępnie należy użyć polecenia <code class=\"language-text\">npm init</code> które stworzy w folderze plik <strong>package.json</strong> oraz pozwoli na instalację modułów npm (czyli naszego <strong>koa</strong>). Wypełnienie wszystkich informacji nie jest konieczne.</p>\n<h3>Instalacja Koa</h3>\n<p>Jeżeli wszystkie poprzednie kroki zostały spełnione, polecenie <code class=\"language-text\">npm i koa</code> zainstaluje <strong>framework koa</strong> w naszym folderze.</p>\n<h2>Pierwsza aplikacja</h2>\n<p>W naszym folderze tworzymy plik javascript o dowolnej nazwie, ja nazwę go <strong>start.js</strong>. Następnie wklejamy do niego kod:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Aby uruchomić teraz nasz skrypt, używamy polecenia: <code class=\"language-text\">node start.js</code>\nNastępnie wejdź w przeglądarce pod adres <strong><a href=\"http://localhost:3000/\">http://localhost:3000/</a></strong>, nasz skrypt wyświetla <strong>Hello Wordl</strong></p>\n<h3>No okej, ale jak to działa? Przejrzyjmy kod linia po linii</h3>\n<p>Aby móc użyć koa w naszym pliku, importujemy go za pomocą require i przypisujemy do stałej  <strong>Koa</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Następnie tworzymy instancję klasy <strong>Koa</strong>, i przypisujemy do kolejnej stałej, tym razem <strong>app</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Następna część jest odrobine bardziej skomplikowana:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>app.use()</strong> dodaje do aplikacji funkcję podaną jako argument, dzięki temu możemy chociażby wysyłać czy pobierać pliki na serwerze, dokładniej omówimy to jednak w następnej części poradnika. Bardziej interesująca dla nas jest natomias funkcja znajdująca się wewnątrz - wyciągnijmy ją więc z <strong>app.use</strong> i omówmy:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">async</span> ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jest to tak zwana <strong>funkcja strzałkowa</strong> - jeżeli jest ci obca to odsyłam do MDN: <a href=\"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Functions/Funkcje_strzalkowe\">link</a>. Widzimy tutaj również <strong>async</strong> - jak wspomniałem koa w dużej mierze wykorzystuje asynchroniczność oraz składnię <strong>async/await</strong> jednak w tym przykładzie nie ma to żadnego znaczenia.</p>\n<p>Jako parametr przyjmuje argument <strong>ctx</strong>. Jest to skrót od <strong>context</strong>, oraz zawiera w sobie zarówno <strong>req</strong> jak i <strong>res</strong> (request i response) znane z node.\nOznacza to że zarówno przy pobieraniu danych z zapytania jak i wysyłaniu naszych do użytkownika będziemy korzystać właśnie z <strong>ctx</strong>. Przy wysłaniu odpowiedzi musimy skorzystać z obiektu ctx.response, czyli obiektu który zawiera ogół informacji o odpowiedzi z serwera. W tym przykładzie interesuje nas konkretnie <strong>body</strong>, do którego można dostać się zarówno poprzez <code class=\"language-text\">ctx.body</code> jak i <code class=\"language-text\">ctx.response.body</code>. Jeżeli mi nie wierzysz - po prostu podmień odpowiednie fragmenty i sprawdz czy kod nadal działa (gwarantuję że tak).</p>\n<p>Ostatnia część pliku to <code class=\"language-text\">app.listen(3000);</code>. Mówi on aplikacji, aby nasłuchiwała pod adresem <a href=\"http://localhost:port/\">http://localhost:port/</a>, gdzie <strong>port</strong> podajemy właśnie wewnątrz funkcji listen.</p>\n<h3>Dzięki za uwagę ;)</h3>","frontmatter":{"date":"January 19, 2019","path":"/2019/1/koa1","title":"Poradnik Koa #1: Instalacja i Hello-World"}}},"pageContext":{}}