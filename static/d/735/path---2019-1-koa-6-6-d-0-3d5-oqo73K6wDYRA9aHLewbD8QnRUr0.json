{"data":{"markdownRemark":{"html":"<h1>Podstawowa obsługa formularzy w Koa</h1>\n<p>Ostatnio nauczyliśmy się jak na podstawie danych z serwera tworzyć wygląd naszych podstron, dzisiaj nauczymy się komunikacji w drugą stronę - serwer odbierze dane z naszej witryny!</p>\n<h2>Zacznijmy więc od stworzenia podstrony, z formularzem</h2>\n<p>Wejdźmy zatem do naszego katalogu <strong>views</strong> i stwórzmy tam plik o nazwie \"forms.pug\". Nazwa jest całkowicie dowolna. Zacznijmy więc tworzyć stronę z prostym formularzem:</p>\n<div class=\"gatsby-highlight\" data-language=\"pug\"><pre class=\"language-pug\"><code class=\"language-pug\"><span class=\"token tag\">html</span>\n    <span class=\"token tag\">head</span>\n        <span class=\"token tag\">title</span><span class=\"token punctuation\">=</span><span class=\"token code\">title</span>\n    <span class=\"token tag\">body</span>\n        <span class=\"token tag\">form<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">action</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">\"/sendData\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span></span><span class=\"token punctuation\">)</span></span></span>\n            <span class=\"token tag\">input<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"formContent\"</span></span><span class=\"token punctuation\">)</span></span></span>\n            <span class=\"token tag\">input<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">\"submit\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">value</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">\"Wyślij dane\"</span></span><span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<p>Nasza strona zawiera prosty formularz z dwoma inputami: jeden, o typie <strong>text</strong> będzie miejscem do którego wprowadzimy tekst który następnie wyślemy do serwera,jego name, czyli <strong>formContent</strong> będzie nam potrzebny do uzyskania tych konkretnie danych po stronie serwera, a input o typie <strong>submit</strong> to przycisk, który wyśle dane. Cały formularz ma atrybut <strong>action</strong> ustawiony pod adres <strong>/sendData</strong>, oznacza to że wszystkie dane będą wysyłane pod adres <code class=\"language-text\">http://localhost:3000/sendData</code>. Atrybut <strong>method</strong> ustawiłem na wartość <strong>POST</strong>.Na pełne <strong>REST API</strong> przyjdzie czas niebawem.</p>\n<h2>Co chcemy osiągnąć?</h2>\n<p>Wyobraźmy sobie że podstrona z naszym formularzem to coś w rodzaju okienka czatu - chcemy po prostu wpisany tam tekst dostarczyć do serwera. Podobnie będzie to działać z kilkoma polami - jak na przykład w przypadku logowania, gdzie potrzebujemy zarówno hasła jak i loginu. </p>\n<p>Zacznijmy więc od podpięcia naszego <strong>forms.pug</strong> pod <code class=\"language-text\">/</code> w naszych <strong>routes</strong>. Zedytujmy więc plik <strong>router.js</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> views <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nrouter\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"forms.pug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<p>Póki co dokładnie w ten sposób powinien przedstawiać się nasz plik z routingiem. Usunęliśmy routa wskazującego na <code class=\"language-text\">/hello</code>, pozostał jedynie ten wskazujący na <code class=\"language-text\">/</code>, ale teraz renderuje on nasz plik z formularzem. I dokładnie o to nam chodziło. Aby sprawdzić czy wszystko działa poprawnie wejdź pod adres <code class=\"language-text\">/http://localhost:3000/</code> i sprawdź czy strona rzeczywiście zawiera nasz prosty formularz. Przypomnę jedynie że <strong>Po zedytowaniu naszych plików takich jak main.js albo router.js należy ponownie urochomić serwer poleceniem</strong> <code class=\"language-text\">node main.js</code>.</p>\n<h2>Reagowanie na wysłane dane</h2>\n<p>To co teraz chcemy zrobić, to odebrać dane z naszego formularza. Wysłaliśmy je pod adres <code class=\"language-text\">/sendData</code> metodą <strong>POST</strong>, dodajmy więc w naszym pliku <strong>router.js</strong> kod, który pozwoli nam zareagować na wysłane dane. Tym razem nie użyjemy w routerze <strong>.get</strong>, a <strong>.post</strong>, ze względu na metodę którą wysłaliśmy dane:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> views <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nrouter\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"forms.pug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/sendData'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FORMULARZ ODEBRANY!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<p>Jak nietrudno się domyślić, po wysłaniu danych w naszym terminalu powinien wyświetlić się napis <code class=\"language-text\">FORMULARZ ODEBRANY</code>. Sprawdźmy więc czy tak się dzieje.</p>\n<h2>Sukces!</h2>\n<p>Terminal wyświetlił zadany komunikat. To co nam pozostało, to sprawić aby wyświetlił również wartość pola tekstowego. Jako że znajduje się ona w obiekcie <strong>ctx.request.body</strong>, do jego obsługi potrzebny jest nam kolejny middleware, tym razem jest to <strong>bodyparser</strong>. Zainstalujemy go poleceniem <code class=\"language-text\">node install koa-bodyparser</code>. Jeżeli instalacja się powiodła, dodajmy go do naszej aplikacji. Zedytujmy więc plik <strong>main.js</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./router'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> views <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bodyparser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-bodyparser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">bodyparser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">views</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/views'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    map<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        extension<span class=\"token punctuation\">:</span> <span class=\"token string\">'pug'</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre></div>","frontmatter":{"date":"January 28, 2019","path":"/2019/1/koa6","title":"Poradnik Koa #6 - Formularze"}}},"pageContext":{}}