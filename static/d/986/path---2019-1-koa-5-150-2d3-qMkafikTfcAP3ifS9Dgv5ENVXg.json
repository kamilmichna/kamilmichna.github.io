{"data":{"markdownRemark":{"html":"<h1>Template engines w Koa.js</h1>\n<h2>Czym są template engines?</h2>\n<p>Na to pytanie odpowiedziałem dokładniej w tym poście: <a href=\"https://koajs.com/\">Link</a>. W skrócie przypomnę jednak że tak zwane <strong>template engines</strong> to w dużym uproszczeniu często bardzo podobne składnią do <strong>języka html</strong> \"foremki\" które pozwalają w bardzo prosty sposób dostosować treść na naszej stronie do tego, co na przykład pobiera z bazy danych nasz serwer. Nie dzieje się to co prawda dynamicznie, jak przy użyciu <strong>technologii AJAX</strong> i pobieraniu danych na przykład z Api wystawianego przez nas serwer (czym również niebawem się zajmiemy). Dane z serwera wpływ na treść naszej strony mają tylko raz, przy jej wyrenderowaniu - czyli na przykład dane na stronie mogą zmienić się po odświeżeniu okna przeglądarki, ale nie stanie się to dynamicznie.</p>\n<h2>Zalety template engines</h2>\n<p>Przede wszystkim jest to najprostszy sposób na dostosowanie <strong>treści strony</strong> do danych z serwera. Dzisiaj stworzymy sobie bardzo prosty przykład i przekażemy naszej stronie <strong>odrobinę tekstu z serwera</strong></p>\n<h1>Do dzieła!</h1>\n<h2>Wybór i instalacja template engine</h2>\n<p>Podobnie jak w przypadku starszego brata Koa.js czyli <strong>Express.js</strong> do wyboru mamy ich całkiem sporo. Wymieniłem już wcześniej kilka z najpopularniejszych w poście w których omówiłem czym dokładnie są <strong>template engines</strong>. Większość z nich oferuje bardzo podobną funkcjonalność i wybór odpowiedniego dla nas sprowadza się głównie do własnych preferencji, lub tego który silnik jest aktualnie używany w projekcie do którego chcemy dołączyć.</p>\n<h2>Na początku zainstalujmy niezbędny pakiet.</h2>\n<p>Nasz <strong>template rendering</strong> zaimplementujemy do przykładu który stworzyliśmy w poprzednim poście: <a href=\"https://kamilmichna.github.io/2019/1/koa4\">Link</a>. Musimy doinstalować tam dwie niezbędne paczki. Pierwszą z nich będzie <strong>koa_views</strong>, która pozwala nam na implementację <strong>template_renderingu</strong>, a drugą będzie już paczka adekwatna do języka w którym będziemy pisać nasze szablony, ja wybrałem <strong>pug</strong>.\nZainstalujmy więc paczkę <strong>koa_views</strong>: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install koa-views </code></pre></div>\n<p>A teraz paczkę <strong>pug</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install pug</code></pre></div>\n<p>Teraz zmieńmy trochę nasz plik <strong>main.js</strong> z poprzedniego poradnika</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//main.js</span>\n<span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./router'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//1</span>\n<span class=\"token keyword\">const</span> views <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//2</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">views</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/views'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    map<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        extension<span class=\"token punctuation\">:</span> <span class=\"token string\">'pug'</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre></div>\n<p>Na początku zajmijmy się punktem <strong>numer 1</strong>. <code class=\"language-text\">const views = require(&#39;koa-views&#39;);</code> po prostu przypisuje nam do stałej views wcześniej zaimportowaną paczkę <strong>koa-views</strong>, co pozwoli nam w prosty sposób jej użyć. Ciekawiej natomiast robi się przy bloku kodu oznaczonym komentarzem <strong>2</strong>, rozłózmy go więc na czynniki pierwsze.</p>\n<p>Składnia <strong>app.use</strong> przywodzi nam (i słusznie) znane już z poprzednich poradników <strong>middleware</strong>, tym razem nie służy nam ono do routingu aplikacji a właśnie do konfiguracji renderowania naszych templatek. Wiem że brzmi to trochę skomplikowanie, przyjrzyjmy mu się więc z bliska. Argumentem funkcji <strong>app.use</strong> jest </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">views</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/views'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    map<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        extension<span class=\"token punctuation\">:</span> <span class=\"token string\">'pug'</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>fragment <code class=\"language-text\">__dirname + &#39;/views&#39;</code> mówi nam, że nasze templatki powinny znajdować się w folderze <strong>views</strong> w tym katalogu co nasz plik <strong>main.js</strong>.</p>\n<p>Obiekt </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    map: {\n        extension: &#39;pug&#39; \n    }\n}</code></pre></div>\n<p>i jego właściwość <strong>extension</strong> mówi nam o tym, jakiego template engine użyjemy. Jak już wspomniałem, u mnie jest to <strong>pug</strong>.</p>\n<p>Następnie stwórzymy wspomniany wcześniej folder <strong>views</strong>, a w nim plik index.pug.\nNie będę w tym poradniku omawiał składni poszczególnych <strong>template languages</strong>, umieszczę jedynie tekst naszego pliku index.pug</p>","frontmatter":{"date":"January 28, 2019","path":"/2019/1/koa5","title":"Poradnik Koa #5 - template engines"}}},"pageContext":{}}