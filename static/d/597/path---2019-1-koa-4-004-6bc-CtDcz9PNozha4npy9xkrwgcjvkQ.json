{"data":{"markdownRemark":{"html":"<h1>Jak stworzyć routing w oddzielnym pliku?</h1>\n<p>Mimo iż stworzenie routingu tak jak zrobiliśmy to w tutorialu nr 2 jest bardzo proste i intuicyjne, warto przenieść routy naszej aplikacji do odzielnego pliku. Jak to zrobić? Zacznijmy od standardowego serwera w <strong>Koa</strong>, pliki serwera umieśćmy w pliku <strong>main.js</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//plik main.js</span>\n\n<span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre></div>\n<p>Teraz stwórzymy oddzielny plik. Nazwiemy go <strong>router.js</strong>. Możesz umieścić go gdzie tylko chcesz w swoim projekcie, ja umieszczę go w tym samym folderze, obok pliku <strong>main.js</strong>.</p>\n<h2>Jak stworzyć routing?</h2>\n<p>Jak wiadomo, jedną z głównych różnic między <strong>Express</strong> a <strong>Koa</strong> jest to, że potrzebny nam middleware musimy doinstalować sobie sami. Zainstalujmy więc przy pomocy npm paczkę <strong>koa-router</strong> która pozwoli nam na stworzenie routingu. Jeżeli zainstalowałeś już tą paczkę przy okazji czytania jednego z poprzednich poradników, pomiń ten krok, ja jednak przypomnę jak to zrobić: <code class=\"language-text\">npm install --save koa-router</code>.</p>\n<h2>Uzupełnianie pliku router.js</h2>\n<p>Na początku, podobnie jak w tutorialu nr 2, musimy zdefiniować sobie w pliku <strong>router.js</strong> nasze podstawowe routy.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//plik router.js</span>\n<span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nrouter\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body<span class=\"token operator\">+</span><span class=\"token string\">\"THIS IS MAIN PAGE\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</code></pre></div>\n<p>Na początku definiujemy sobie stałe Router, czyli klasę potrzebną do stworzenia routingu, oraz router, czyli jej instancję którą będziemy używać przy obsłudze naszych zapytań. Używając składni <strong>module.exports</strong>, czyli składni modułów <strong>CJS</strong> eksportujemy nasze routy i umożliwiamy ich zaimportowanie w pliku <strong>main.js</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//plik main.js</span>\n\n\n<span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./router'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre></div>\n<p>Teraz pora wejść na adres localhost:3000 i przetestować nasze routy. Pierwszy zdefiniowany przez nas to <code class=\"language-text\">/hello</code>, gdy wejdziemy pod adres <code class=\"language-text\">localhost:3000/hello</code> naszym oczom ukaże się treść <strong>HELLO WORLD</strong>, a gdy pod adres <code class=\"language-text\">localhost:3000/</code> naszym oczom ukaże się zdefiniowane w routes <strong>THIS IS MAIN PAGE</strong>.</p>\n<h2>Myślę że przeniesienie routingu naszego prostego serwera, szczególnie osobom dopiero zaczynającym przygodę z Koa pozwoli lepiej uporządkować strukturę swojej aplikacji. W następnym poście zaczniemy wykorzystywać możliwości template engines.</h2>\n<h3>Dzięki za uwagę ;)</h3>","frontmatter":{"date":"January 23, 2019","path":"/2019/1/koa4","title":"Poradnik Koa #4 Routing w oddzielnym pliku"}}},"pageContext":{}}